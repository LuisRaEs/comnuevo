//Module Lib autogenerated
const moduleAddress = "http://18.190.84.148:9091/";
const version = "1.0.0";
const db = "testing";

/******************************************************************** 
*******************Example usage of any post body********************
 * ******************************************************************
 Entity.PostRequestName()= PROMISE
 

********************************************************************
************************Example ************************************
PostRequestName().then((response) => {
    // Handle successful response
    console.log(response);
  })
  .catch((error) => {
    // Handle error
    console.error(error);
  });
*******************************************************************
*/

function removeEmptyValues(obj) {
  const clonedObject = JSON.parse(JSON.stringify(obj));
  for (let key in clonedObject) {
    if (
      clonedObject[key] === null ||
      clonedObject[key] === undefined ||
      clonedObject[key] === ""
    ) {
      delete clonedObject[key];
    }
  }
  return clonedObject;
}
function uploadFileToSabueso(fileupload, callback) {
  const url = "http://18.190.84.148:9091/" + "core/FileUpload/create/";
  var xhr = getBasicRequest(url, callback);
  if (xhr === null) {
    return;
  }
  const bodyString = JSON.stringify({
    data: fileupload.Base64,
    databyn: fileupload.ByteArray,
    name: fileupload.Name + "." + fileupload.Type,
  });
  xhr.send(bodyString);
}
function downloadFileFromSabueso(file_id, callback) {
  const url = "http://18.190.84.148:9091/" + "core/FileUpload/get/";
  var xhr = getBasicRequest(url, callback);
  if (xhr === null) {
    return;
  }
  const bodyString = JSON.stringify({ id: file_id });
  xhr.send(bodyString);
}

export function decodeJWT(token) {
  const base64Url = token.split(".")[1];
  const base64 = base64Url.replace("-", "+").replace("_", "/");
  const decoded = JSON.parse(atob(base64));
  return decoded;
}

function getClaim(token, claimName) {
  const decoded = decodeJWT(token);
  return decoded[claimName];
}
export class ServerResponse {
  constructor(success = null, failure = null) {
    this.success = success;
    this.failure = failure;
  }
}
function checkCallbackSuccess(callback) {
  if (
    callback === null ||
    typeof callback === "undefined" ||
    typeof callback.success !== "function" ||
    callback.success.length !== 1
  ) {
    console.error(
      "FRONT-DEV-ERROR: wrong or damaged callback. Success response was called but no callback was attached"
    );
    return false;
  } else {
    return true;
  }
}
function checkCallbackFailure(callback) {
  if (
    callback === null ||
    typeof callback === "undefined" ||
    typeof callback.failure !== "function" ||
    callback.failure.length !== 1
  ) {
    console.error(
      "FRONT-DEV-ERROR: wrong or damaged callback. Error response was called but no callback was attached"
    );
    return false;
  } else {
    return true;
  }
}
function requestScreenPermitions(screen) {
  const url = moduleAddress + "requestScreen";
  return postPromise(url, "GET", removeEmptyValues(screen));
}
function postPromise(url, PosType, data) {
  return new Promise((resolve, reject) => {
    let requestInfo = {
      method: PosType,
      headers: {
        "Content-Type": "application/json",
        Authorization: sessionStorage.getItem("jwt"),
        token: getClaim(sessionStorage.getItem("jwt"), "sabuesotkn"),
        verison: version,
        target: db,
      },
    };
    if (PosType != "GET") {
      requestInfo.body = JSON.stringify(data);
    } else {
      requestInfo.headers.data = JSON.stringify(data);
    }
    fetch(url, requestInfo)
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not OK");
        }
        return response.json();
      })
      .then((responseData) => {
        if (responseData.status !== "SUCCESS") {
          reject(responseData);
        }
        resolve(responseData);
      })
      .catch((error) => {
        reject(error);
      });
  });
}
function getBasicRequest(url, callback) {
  const xhr = new XMLHttpRequest();
  xhr.open("POST", url, true);
  if (!sessionStorage.getItem("jwt")) {
    const error = errorBuilderById(0);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return null;
  }
  xhr.setRequestHeader("Authorization", sessionStorage.getItem("jwt"));
  xhr.setRequestHeader(
    "token",
    getClaim(sessionStorage.getItem("jwt"), "sabuesotkn")
  );
  xhr.setRequestHeader("Content-Type", "application/json");
  xhr.setRequestHeader("verison", version);
  xhr.setRequestHeader("target", db);
  xhr.onreadystatechange = function () {
    if (xhr.readyState === 4) {
      if (xhr.status === 200) {
        const response = JSON.parse(xhr.responseText);
        if (response.NextJWT) {
          sessionStorage.setItem("jwt", response.NextJWT);
        }
        if (response.status === "ERROR") {
          if (checkCallbackFailure(callback)) {
            callback.failure(response);
          }
        } else {
          if (checkCallbackSuccess(callback)) {
            callback.success(response);
          }
        }
      } else {
        const response = {
          status: "ERROR",
          code: "NAV" + xhr.status,
        };
        if (checkCallbackFailure(callback)) {
          callback.failure(response);
        }
      }
    }
  };
  return xhr;
}

function errorBuilderById(id) {
  var status = "ERROR";
  var code = "DEV_FRONT_ERROR_UNK";
  var evl = "Unknown error on frontend";
  switch (id) {
    case 0:
      status = "ERROR";
      code = "NO_JWT";
      evl = "No JWT on session storage";
      break;
    case 1:
      status = "ERROR";
      code = "DEV_FRONT_NO_BODY";
      evl = "No body on request that NEEDS IT";
      break;
    case 2:
      status = "ERROR";
      code = "DEV_FRONT_NO_PARENT";
      evl = "No PARENT on request that NEEDS IT";
      break;
  }
  const error = {
    code: code,
    status: status,
    descripcion: evl,
  };
  return error;
}

export class Device {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Marca = undefined;
    /**
     * @type {String}
     */
    this.Modelo = undefined;
    /**
     * @type {String}
     */
    this.Serial = undefined;
    /**
     * @type {String}
     */
    this.Ram = undefined;
    /**
     * @type {String}
     */
    this.HardDrives = undefined;
    /**
     * @type {String}
     */
    this.DeviceName = undefined;
    /**
     * @type {String}
     */
    this.Username = undefined;
    /**
     * @type {String}
     */
    this.DeviceHolder = undefined;
    /**
     * @type {String}
     */
    this.OS = undefined;
    /**
     * @type {String}
     */
    this.Apps = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Device
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createDevice(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Device's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Device.buscar(this);
  }
  /**
   * Busca Device's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findDevice(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Device(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateDevice(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteDevice({ id: this.ID.toString() });
  }
  main_Device(args) {
    return main_Device(args, this.ID);
  }

  /**
   * Get the Marca of Device
   * @method
   * @returns {string} The Marca of Device
   */
  getMarca() {
    return this.Marca;
  }
  /**
   * Sets the Marca of Device
   * @method
   * @param {string} value - The Marca of Device
   * @returns The original Device(this object)
   */

  setMarca(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Marca = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Modelo of Device
   * @method
   * @returns {string} The Modelo of Device
   */
  getModelo() {
    return this.Modelo;
  }
  /**
   * Sets the Modelo of Device
   * @method
   * @param {string} value - The Modelo of Device
   * @returns The original Device(this object)
   */

  setModelo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Modelo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Serial of Device
   * @method
   * @returns {string} The Serial of Device
   */
  getSerial() {
    return this.Serial;
  }
  /**
   * Sets the Serial of Device
   * @method
   * @param {string} value - The Serial of Device
   * @returns The original Device(this object)
   */

  setSerial(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Serial = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Ram of Device
   * @method
   * @returns {string} The Ram of Device
   */
  getRam() {
    return this.Ram;
  }
  /**
   * Sets the Ram of Device
   * @method
   * @param {string} value - The Ram of Device
   * @returns The original Device(this object)
   */

  setRam(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Ram = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HardDrives of Device
   * @method
   * @returns {string} The HardDrives of Device
   */
  getHardDrives() {
    return this.HardDrives;
  }
  /**
   * Sets the HardDrives of Device
   * @method
   * @param {string} value - The HardDrives of Device
   * @returns The original Device(this object)
   */

  setHardDrives(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HardDrives = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the DeviceName of Device
   * @method
   * @returns {string} The DeviceName of Device
   */
  getDeviceName() {
    return this.DeviceName;
  }
  /**
   * Sets the DeviceName of Device
   * @method
   * @param {string} value - The DeviceName of Device
   * @returns The original Device(this object)
   */

  setDeviceName(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.DeviceName = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Username of Device
   * @method
   * @returns {string} The Username of Device
   */
  getUsername() {
    return this.Username;
  }
  /**
   * Sets the Username of Device
   * @method
   * @param {string} value - The Username of Device
   * @returns The original Device(this object)
   */

  setUsername(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Username = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the DeviceHolder of Device
   * @method
   * @returns {string} The DeviceHolder of Device
   */
  getDeviceHolder() {
    return this.DeviceHolder;
  }
  /**
   * Sets the DeviceHolder of Device
   * @method
   * @param {string} value - The DeviceHolder of Device
   * @returns The original Device(this object)
   */

  setDeviceHolder(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.DeviceHolder = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the OS of Device
   * @method
   * @returns {string} The OS of Device
   */
  getOS() {
    return this.OS;
  }
  /**
   * Sets the OS of Device
   * @method
   * @param {string} value - The OS of Device
   * @returns The original Device(this object)
   */

  setOS(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.OS = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Apps of Device
   * @method
   * @returns {string} The Apps of Device
   */
  getApps() {
    return this.Apps;
  }
  /**
   * Sets the Apps of Device
   * @method
   * @param {string} value - The Apps of Device
   * @returns The original Device(this object)
   */

  setApps(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Apps = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Grupos {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.NombreGrupo = undefined;
    /**
     * @type {Catalogo_Grupo}
     */
    this.TipoGrupo = undefined;
    /**
     * @type {String}
     */
    this.ZonaHoraria = undefined;
    /**
     * @type {Boolean}
     */
    this.VisibilidadDelGrupo = undefined;
    /**
     * @type {String}
     */
    this.CamposPersonalizados = undefined;
    /**
     * @type {String}
     */
    this.LogotipoFile = undefined;
    /**
     * @type {String}
     */
    this.TituloCabeceraNoticias = undefined;
    /**
     * @type {String}
     */
    this.CabeceraFile = undefined;
    /**
     * @type {Array<User>}
     */
    this.Usuarios = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Grupos
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createGrupos(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Grupos's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Grupos.buscar(this);
  }
  /**
   * Busca Grupos's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findGrupos(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Grupos(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      if (this.NombreGrupo != undefined && this.NombreGrupo != null) {
        if (this.NombreGrupo.length > 50) {
          let response = {
            status: "ERROR",
            code: "WRONG_SIZE_NombreGrupo",
            description: "NombreGrupo must be less than 50",
          };
          reject(response);
          return;
        }
      }
      if (
        this.NombreGrupo == undefined ||
        this.NombreGrupo == null ||
        this.NombreGrupo == ""
      ) {
        let response = {
          status: "ERROR",
          code: "RULE_EMPTY_NombreGrupo",
          description: "NombreGrupo must not be null or empty",
        };
        reject(response);
        return;
      }
      resolve(updateGrupos(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteGrupos({ id: this.ID.toString() });
  }
  main_Grupos(args) {
    return main_Grupos(args, this.ID);
  }

  assingTipoGrupo(args) {
    return assingTipoGrupotoGrupos(args, this.ID);
  }

  addUsuarios(args) {
    return addUsuariostoGrupos(args, this.ID);
  }

  /**
   * Get the NombreGrupo of Grupos
   * @method
   * @returns {string} The NombreGrupo of Grupos
   */
  getNombreGrupo() {
    return this.NombreGrupo;
  }
  /**
   * Sets the NombreGrupo of Grupos
   * @method
   * @param {string} value - The NombreGrupo of Grupos
   * @returns The original Grupos(this object)
   */

  setNombreGrupo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombreGrupo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoGrupo of Grupos
   * @method
   * @returns {Catalogo_Grupo} The TipoGrupo of Grupos
   */
  getTipoGrupo() {
    return this.TipoGrupo;
  }
  /**
   * Sets the TipoGrupo of Grupos
   * @method
   * @param {Catalogo_Grupo} value - The TipoGrupo of Grupos
   * @returns The original Grupos(this object)
   */
  setTipoGrupo(value) {
    //object based
    if (value == null || value == undefined || value instanceof Catalogo_Grupo)
      this.TipoGrupo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the ZonaHoraria of Grupos
   * @method
   * @returns {string} The ZonaHoraria of Grupos
   */
  getZonaHoraria() {
    return this.ZonaHoraria;
  }
  /**
   * Sets the ZonaHoraria of Grupos
   * @method
   * @param {string} value - The ZonaHoraria of Grupos
   * @returns The original Grupos(this object)
   */

  setZonaHoraria(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ZonaHoraria = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the VisibilidadDelGrupo of Grupos
   * @method
   * @returns {boolean} The VisibilidadDelGrupo of Grupos
   */
  getVisibilidadDelGrupo() {
    return this.VisibilidadDelGrupo;
  }
  /**
   * Sets the VisibilidadDelGrupo of Grupos
   * @method
   * @param {boolean} value - The VisibilidadDelGrupo of Grupos
   * @returns The original Grupos(this object)
   */

  setVisibilidadDelGrupo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.VisibilidadDelGrupo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.VisibilidadDelGrupo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the CamposPersonalizados of Grupos
   * @method
   * @returns {string} The CamposPersonalizados of Grupos
   */
  getCamposPersonalizados() {
    return this.CamposPersonalizados;
  }
  /**
   * Sets the CamposPersonalizados of Grupos
   * @method
   * @param {string} value - The CamposPersonalizados of Grupos
   * @returns The original Grupos(this object)
   */

  setCamposPersonalizados(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CamposPersonalizados = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the LogotipoFile of Grupos
   * @method
   * @returns {string} The LogotipoFile of Grupos
   */
  getLogotipoFile() {
    return this.LogotipoFile;
  }
  /**
   * Sets the LogotipoFile of Grupos
   * @method
   * @param {string} value - The LogotipoFile of Grupos
   * @returns The original Grupos(this object)
   */

  setLogotipoFile(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.LogotipoFile = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TituloCabeceraNoticias of Grupos
   * @method
   * @returns {string} The TituloCabeceraNoticias of Grupos
   */
  getTituloCabeceraNoticias() {
    return this.TituloCabeceraNoticias;
  }
  /**
   * Sets the TituloCabeceraNoticias of Grupos
   * @method
   * @param {string} value - The TituloCabeceraNoticias of Grupos
   * @returns The original Grupos(this object)
   */

  setTituloCabeceraNoticias(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.TituloCabeceraNoticias = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CabeceraFile of Grupos
   * @method
   * @returns {string} The CabeceraFile of Grupos
   */
  getCabeceraFile() {
    return this.CabeceraFile;
  }
  /**
   * Sets the CabeceraFile of Grupos
   * @method
   * @param {string} value - The CabeceraFile of Grupos
   * @returns The original Grupos(this object)
   */

  setCabeceraFile(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CabeceraFile = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Compania {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.NombreComercial = undefined;
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {String}
     */
    this.Direccion = undefined;
    /**
     * @type {String}
     */
    this.Ciudad = undefined;
    /**
     * @type {String}
     */
    this.CodigoPostal = undefined;
    /**
     * @type {String}
     */
    this.Ubicacion = undefined;
    /**
     * @type {String}
     */
    this.DireccionWeb = undefined;
    /**
     * @type {Int}
     */
    this.Idioma = undefined;
    /**
     * @type {Int}
     */
    this.ZonaHorarial = undefined;
    /**
     * @type {Date}
     */
    this.HoraInicio = undefined;
    /**
     * @type {Date}
     */
    this.HoraFin = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraLunes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMartes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMiercoles = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraJueves = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraViernes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraSabado = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraDomingo = undefined;
    /**
     * @type {Int}
     */
    this.OrdenDelTiempo = undefined;
    /**
     * @type {String}
     */
    this.AliasCorreo = undefined;
    /**
     * @type {Boolean}
     */
    this.PaisEnNotificaciones = undefined;
    /**
     * @type {String}
     */
    this.Logo1 = undefined;
    /**
     * @type {String}
     */
    this.Logo2 = undefined;
    /**
     * @type {Boolean}
     */
    this.MostrarAusencias = undefined;
    /**
     * @type {Boolean}
     */
    this.HabilitarVerificacion = undefined;
    /**
     * @type {Boolean}
     */
    this.ContrasenaDatos = undefined;
    /**
     * @type {Boolean}
     */
    this.HabilitarEmail = undefined;
    /**
     * @type {String}
     */
    this.NombreContacto = undefined;
    /**
     * @type {String}
     */
    this.CorreoContacto = undefined;
    /**
     * @type {String}
     */
    this.CelularContacto = undefined;
    /**
     * @type {String}
     */
    this.BuzonDeSugerencias = undefined;
    /**
     * @type {Array<User>}
     */
    this.Usuarios = [];
    /**
     * @type {Array<Cargo>}
     */
    this.Cargos = [];
    /**
     * @type {Array<Ausencia>}
     */
    this.Ausencias = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Compania
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCompania(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Compania's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Compania.buscar(this);
  }
  /**
   * Busca Compania's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCompania(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Compania(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCompania(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCompania({ id: this.ID.toString() });
  }
  main_Compania(args) {
    return main_Compania(args, this.ID);
  }

  addUsuarios(args) {
    return addUsuariostoCompania(args, this.ID);
  }

  addCargos(args) {
    return addCargostoCompania(args, this.ID);
  }

  addAusencias(args) {
    return addAusenciastoCompania(args, this.ID);
  }

  /**
   * Get the NombreComercial of Compania
   * @method
   * @returns {string} The NombreComercial of Compania
   */
  getNombreComercial() {
    return this.NombreComercial;
  }
  /**
   * Sets the NombreComercial of Compania
   * @method
   * @param {string} value - The NombreComercial of Compania
   * @returns The original Compania(this object)
   */

  setNombreComercial(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombreComercial = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Nombre of Compania
   * @method
   * @returns {string} The Nombre of Compania
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Compania
   * @method
   * @param {string} value - The Nombre of Compania
   * @returns The original Compania(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Direccion of Compania
   * @method
   * @returns {string} The Direccion of Compania
   */
  getDireccion() {
    return this.Direccion;
  }
  /**
   * Sets the Direccion of Compania
   * @method
   * @param {string} value - The Direccion of Compania
   * @returns The original Compania(this object)
   */

  setDireccion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Direccion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Ciudad of Compania
   * @method
   * @returns {string} The Ciudad of Compania
   */
  getCiudad() {
    return this.Ciudad;
  }
  /**
   * Sets the Ciudad of Compania
   * @method
   * @param {string} value - The Ciudad of Compania
   * @returns The original Compania(this object)
   */

  setCiudad(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Ciudad = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CodigoPostal of Compania
   * @method
   * @returns {string} The CodigoPostal of Compania
   */
  getCodigoPostal() {
    return this.CodigoPostal;
  }
  /**
   * Sets the CodigoPostal of Compania
   * @method
   * @param {string} value - The CodigoPostal of Compania
   * @returns The original Compania(this object)
   */

  setCodigoPostal(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CodigoPostal = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Ubicacion of Compania
   * @method
   * @returns {string} The Ubicacion of Compania
   */
  getUbicacion() {
    return this.Ubicacion;
  }
  /**
   * Sets the Ubicacion of Compania
   * @method
   * @param {string} value - The Ubicacion of Compania
   * @returns The original Compania(this object)
   */

  setUbicacion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Ubicacion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the DireccionWeb of Compania
   * @method
   * @returns {string} The DireccionWeb of Compania
   */
  getDireccionWeb() {
    return this.DireccionWeb;
  }
  /**
   * Sets the DireccionWeb of Compania
   * @method
   * @param {string} value - The DireccionWeb of Compania
   * @returns The original Compania(this object)
   */

  setDireccionWeb(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.DireccionWeb = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Idioma of Compania
   * @method
   * @returns {number} The Idioma of Compania
   */
  getIdioma() {
    return this.Idioma;
  }
  /**
   * Sets the Idioma of Compania
   * @method
   * @param {number} value - The Idioma of Compania
   * @returns The original Compania(this object)
   */

  setIdioma(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Idioma = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Idioma = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ZonaHorarial of Compania
   * @method
   * @returns {number} The ZonaHorarial of Compania
   */
  getZonaHorarial() {
    return this.ZonaHorarial;
  }
  /**
   * Sets the ZonaHorarial of Compania
   * @method
   * @param {number} value - The ZonaHorarial of Compania
   * @returns The original Compania(this object)
   */

  setZonaHorarial(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.ZonaHorarial = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.ZonaHorarial = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HoraInicio of Compania
   * @method
   * @returns {string} The HoraInicio of Compania
   */
  getHoraInicio() {
    return this.HoraInicio;
  }
  /**
   * Sets the HoraInicio of Compania
   * @method
   * @param {string} value - The HoraInicio of Compania
   * @returns The original Compania(this object)
   */

  setHoraInicio(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraInicio = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraFin of Compania
   * @method
   * @returns {string} The HoraFin of Compania
   */
  getHoraFin() {
    return this.HoraFin;
  }
  /**
   * Sets the HoraFin of Compania
   * @method
   * @param {string} value - The HoraFin of Compania
   * @returns The original Compania(this object)
   */

  setHoraFin(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraFin = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the LaboraLunes of Compania
   * @method
   * @returns {boolean} The LaboraLunes of Compania
   */
  getLaboraLunes() {
    return this.LaboraLunes;
  }
  /**
   * Sets the LaboraLunes of Compania
   * @method
   * @param {boolean} value - The LaboraLunes of Compania
   * @returns The original Compania(this object)
   */

  setLaboraLunes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraLunes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraLunes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMartes of Compania
   * @method
   * @returns {boolean} The LaboraMartes of Compania
   */
  getLaboraMartes() {
    return this.LaboraMartes;
  }
  /**
   * Sets the LaboraMartes of Compania
   * @method
   * @param {boolean} value - The LaboraMartes of Compania
   * @returns The original Compania(this object)
   */

  setLaboraMartes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMartes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMartes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMiercoles of Compania
   * @method
   * @returns {boolean} The LaboraMiercoles of Compania
   */
  getLaboraMiercoles() {
    return this.LaboraMiercoles;
  }
  /**
   * Sets the LaboraMiercoles of Compania
   * @method
   * @param {boolean} value - The LaboraMiercoles of Compania
   * @returns The original Compania(this object)
   */

  setLaboraMiercoles(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMiercoles = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMiercoles = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraJueves of Compania
   * @method
   * @returns {boolean} The LaboraJueves of Compania
   */
  getLaboraJueves() {
    return this.LaboraJueves;
  }
  /**
   * Sets the LaboraJueves of Compania
   * @method
   * @param {boolean} value - The LaboraJueves of Compania
   * @returns The original Compania(this object)
   */

  setLaboraJueves(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraJueves = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraJueves = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraViernes of Compania
   * @method
   * @returns {boolean} The LaboraViernes of Compania
   */
  getLaboraViernes() {
    return this.LaboraViernes;
  }
  /**
   * Sets the LaboraViernes of Compania
   * @method
   * @param {boolean} value - The LaboraViernes of Compania
   * @returns The original Compania(this object)
   */

  setLaboraViernes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraViernes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraViernes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraSabado of Compania
   * @method
   * @returns {boolean} The LaboraSabado of Compania
   */
  getLaboraSabado() {
    return this.LaboraSabado;
  }
  /**
   * Sets the LaboraSabado of Compania
   * @method
   * @param {boolean} value - The LaboraSabado of Compania
   * @returns The original Compania(this object)
   */

  setLaboraSabado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraSabado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraSabado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraDomingo of Compania
   * @method
   * @returns {boolean} The LaboraDomingo of Compania
   */
  getLaboraDomingo() {
    return this.LaboraDomingo;
  }
  /**
   * Sets the LaboraDomingo of Compania
   * @method
   * @param {boolean} value - The LaboraDomingo of Compania
   * @returns The original Compania(this object)
   */

  setLaboraDomingo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraDomingo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraDomingo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the OrdenDelTiempo of Compania
   * @method
   * @returns {number} The OrdenDelTiempo of Compania
   */
  getOrdenDelTiempo() {
    return this.OrdenDelTiempo;
  }
  /**
   * Sets the OrdenDelTiempo of Compania
   * @method
   * @param {number} value - The OrdenDelTiempo of Compania
   * @returns The original Compania(this object)
   */

  setOrdenDelTiempo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.OrdenDelTiempo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.OrdenDelTiempo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the AliasCorreo of Compania
   * @method
   * @returns {string} The AliasCorreo of Compania
   */
  getAliasCorreo() {
    return this.AliasCorreo;
  }
  /**
   * Sets the AliasCorreo of Compania
   * @method
   * @param {string} value - The AliasCorreo of Compania
   * @returns The original Compania(this object)
   */

  setAliasCorreo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.AliasCorreo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the PaisEnNotificaciones of Compania
   * @method
   * @returns {boolean} The PaisEnNotificaciones of Compania
   */
  getPaisEnNotificaciones() {
    return this.PaisEnNotificaciones;
  }
  /**
   * Sets the PaisEnNotificaciones of Compania
   * @method
   * @param {boolean} value - The PaisEnNotificaciones of Compania
   * @returns The original Compania(this object)
   */

  setPaisEnNotificaciones(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.PaisEnNotificaciones = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.PaisEnNotificaciones = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Logo1 of Compania
   * @method
   * @returns {string} The Logo1 of Compania
   */
  getLogo1() {
    return this.Logo1;
  }
  /**
   * Sets the Logo1 of Compania
   * @method
   * @param {string} value - The Logo1 of Compania
   * @returns The original Compania(this object)
   */

  setLogo1(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Logo1 = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Logo2 of Compania
   * @method
   * @returns {string} The Logo2 of Compania
   */
  getLogo2() {
    return this.Logo2;
  }
  /**
   * Sets the Logo2 of Compania
   * @method
   * @param {string} value - The Logo2 of Compania
   * @returns The original Compania(this object)
   */

  setLogo2(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Logo2 = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the MostrarAusencias of Compania
   * @method
   * @returns {boolean} The MostrarAusencias of Compania
   */
  getMostrarAusencias() {
    return this.MostrarAusencias;
  }
  /**
   * Sets the MostrarAusencias of Compania
   * @method
   * @param {boolean} value - The MostrarAusencias of Compania
   * @returns The original Compania(this object)
   */

  setMostrarAusencias(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.MostrarAusencias = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.MostrarAusencias = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HabilitarVerificacion of Compania
   * @method
   * @returns {boolean} The HabilitarVerificacion of Compania
   */
  getHabilitarVerificacion() {
    return this.HabilitarVerificacion;
  }
  /**
   * Sets the HabilitarVerificacion of Compania
   * @method
   * @param {boolean} value - The HabilitarVerificacion of Compania
   * @returns The original Compania(this object)
   */

  setHabilitarVerificacion(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.HabilitarVerificacion = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.HabilitarVerificacion = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ContrasenaDatos of Compania
   * @method
   * @returns {boolean} The ContrasenaDatos of Compania
   */
  getContrasenaDatos() {
    return this.ContrasenaDatos;
  }
  /**
   * Sets the ContrasenaDatos of Compania
   * @method
   * @param {boolean} value - The ContrasenaDatos of Compania
   * @returns The original Compania(this object)
   */

  setContrasenaDatos(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.ContrasenaDatos = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.ContrasenaDatos = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HabilitarEmail of Compania
   * @method
   * @returns {boolean} The HabilitarEmail of Compania
   */
  getHabilitarEmail() {
    return this.HabilitarEmail;
  }
  /**
   * Sets the HabilitarEmail of Compania
   * @method
   * @param {boolean} value - The HabilitarEmail of Compania
   * @returns The original Compania(this object)
   */

  setHabilitarEmail(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.HabilitarEmail = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.HabilitarEmail = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NombreContacto of Compania
   * @method
   * @returns {string} The NombreContacto of Compania
   */
  getNombreContacto() {
    return this.NombreContacto;
  }
  /**
   * Sets the NombreContacto of Compania
   * @method
   * @param {string} value - The NombreContacto of Compania
   * @returns The original Compania(this object)
   */

  setNombreContacto(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombreContacto = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CorreoContacto of Compania
   * @method
   * @returns {string} The CorreoContacto of Compania
   */
  getCorreoContacto() {
    return this.CorreoContacto;
  }
  /**
   * Sets the CorreoContacto of Compania
   * @method
   * @param {string} value - The CorreoContacto of Compania
   * @returns The original Compania(this object)
   */

  setCorreoContacto(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CorreoContacto = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CelularContacto of Compania
   * @method
   * @returns {string} The CelularContacto of Compania
   */
  getCelularContacto() {
    return this.CelularContacto;
  }
  /**
   * Sets the CelularContacto of Compania
   * @method
   * @param {string} value - The CelularContacto of Compania
   * @returns The original Compania(this object)
   */

  setCelularContacto(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CelularContacto = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the BuzonDeSugerencias of Compania
   * @method
   * @returns {string} The BuzonDeSugerencias of Compania
   */
  getBuzonDeSugerencias() {
    return this.BuzonDeSugerencias;
  }
  /**
   * Sets the BuzonDeSugerencias of Compania
   * @method
   * @param {string} value - The BuzonDeSugerencias of Compania
   * @returns The original Compania(this object)
   */

  setBuzonDeSugerencias(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.BuzonDeSugerencias = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Noticia {
  constructor(obj) {
    /**
     * @type {Boolean}
     */
    this.Destacar = undefined;
    /**
     * @type {String}
     */
    this.Titulo = undefined;
    /**
     * @type {String}
     */
    this.Articulo = undefined;
    /**
     * @type {Boolean}
     */
    this.VideoDeYoutube = undefined;
    /**
     * @type {String}
     */
    this.LinkYoutube = undefined;
    /**
     * @type {Boolean}
     */
    this.MostrarLogoYNombre = undefined;
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {String}
     */
    this.Logo = undefined;
    /**
     * @type {Array<FileUpload>}
     */
    this.Documentos = [];
    /**
     * @type {Date}
     */
    this.Fecha = undefined;
    /**
     * @type {Int}
     */
    this.CompartirCon = undefined;
    /**
     * @type {Boolean}
     */
    this.EnviarNotificacionPorEmail = undefined;
    /**
     * @type {Boolean}
     */
    this.EnviarRecordatorioPorEmail = undefined;
    /**
     * @type {String}
     */
    this.EnviarRecordatorioPorEmailFecha = undefined;
    /**
     * @type {Boolean}
     */
    this.Estado = undefined;
    /**
     * @type {Array<Comentario>}
     */
    this.Comentarios = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Noticia
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createNoticia(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Noticia's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Noticia.buscar(this);
  }
  /**
   * Busca Noticia's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findNoticia(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Noticia(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateNoticia(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteNoticia({ id: this.ID.toString() });
  }
  main_Noticia(args) {
    return main_Noticia(args, this.ID);
  }

  addDocumentos(args) {
    return addDocumentostoNoticia(args, this.ID);
  }

  addComentarios(args) {
    return addComentariostoNoticia(args, this.ID);
  }

  /**
   * Get the Destacar of Noticia
   * @method
   * @returns {boolean} The Destacar of Noticia
   */
  getDestacar() {
    return this.Destacar;
  }
  /**
   * Sets the Destacar of Noticia
   * @method
   * @param {boolean} value - The Destacar of Noticia
   * @returns The original Noticia(this object)
   */

  setDestacar(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Destacar = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Destacar = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Titulo of Noticia
   * @method
   * @returns {string} The Titulo of Noticia
   */
  getTitulo() {
    return this.Titulo;
  }
  /**
   * Sets the Titulo of Noticia
   * @method
   * @param {string} value - The Titulo of Noticia
   * @returns The original Noticia(this object)
   */

  setTitulo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Titulo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Articulo of Noticia
   * @method
   * @returns {string} The Articulo of Noticia
   */
  getArticulo() {
    return this.Articulo;
  }
  /**
   * Sets the Articulo of Noticia
   * @method
   * @param {string} value - The Articulo of Noticia
   * @returns The original Noticia(this object)
   */

  setArticulo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Articulo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the VideoDeYoutube of Noticia
   * @method
   * @returns {boolean} The VideoDeYoutube of Noticia
   */
  getVideoDeYoutube() {
    return this.VideoDeYoutube;
  }
  /**
   * Sets the VideoDeYoutube of Noticia
   * @method
   * @param {boolean} value - The VideoDeYoutube of Noticia
   * @returns The original Noticia(this object)
   */

  setVideoDeYoutube(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.VideoDeYoutube = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.VideoDeYoutube = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LinkYoutube of Noticia
   * @method
   * @returns {string} The LinkYoutube of Noticia
   */
  getLinkYoutube() {
    return this.LinkYoutube;
  }
  /**
   * Sets the LinkYoutube of Noticia
   * @method
   * @param {string} value - The LinkYoutube of Noticia
   * @returns The original Noticia(this object)
   */

  setLinkYoutube(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.LinkYoutube = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the MostrarLogoYNombre of Noticia
   * @method
   * @returns {boolean} The MostrarLogoYNombre of Noticia
   */
  getMostrarLogoYNombre() {
    return this.MostrarLogoYNombre;
  }
  /**
   * Sets the MostrarLogoYNombre of Noticia
   * @method
   * @param {boolean} value - The MostrarLogoYNombre of Noticia
   * @returns The original Noticia(this object)
   */

  setMostrarLogoYNombre(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.MostrarLogoYNombre = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.MostrarLogoYNombre = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Nombre of Noticia
   * @method
   * @returns {string} The Nombre of Noticia
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Noticia
   * @method
   * @param {string} value - The Nombre of Noticia
   * @returns The original Noticia(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Logo of Noticia
   * @method
   * @returns {string} The Logo of Noticia
   */
  getLogo() {
    return this.Logo;
  }
  /**
   * Sets the Logo of Noticia
   * @method
   * @param {string} value - The Logo of Noticia
   * @returns The original Noticia(this object)
   */

  setLogo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Logo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Fecha of Noticia
   * @method
   * @returns {string} The Fecha of Noticia
   */
  getFecha() {
    return this.Fecha;
  }
  /**
   * Sets the Fecha of Noticia
   * @method
   * @param {string} value - The Fecha of Noticia
   * @returns The original Noticia(this object)
   */

  setFecha(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Fecha = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CompartirCon of Noticia
   * @method
   * @returns {number} The CompartirCon of Noticia
   */
  getCompartirCon() {
    return this.CompartirCon;
  }
  /**
   * Sets the CompartirCon of Noticia
   * @method
   * @param {number} value - The CompartirCon of Noticia
   * @returns The original Noticia(this object)
   */

  setCompartirCon(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.CompartirCon = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.CompartirCon = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the EnviarNotificacionPorEmail of Noticia
   * @method
   * @returns {boolean} The EnviarNotificacionPorEmail of Noticia
   */
  getEnviarNotificacionPorEmail() {
    return this.EnviarNotificacionPorEmail;
  }
  /**
   * Sets the EnviarNotificacionPorEmail of Noticia
   * @method
   * @param {boolean} value - The EnviarNotificacionPorEmail of Noticia
   * @returns The original Noticia(this object)
   */

  setEnviarNotificacionPorEmail(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.EnviarNotificacionPorEmail = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.EnviarNotificacionPorEmail = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the EnviarRecordatorioPorEmail of Noticia
   * @method
   * @returns {boolean} The EnviarRecordatorioPorEmail of Noticia
   */
  getEnviarRecordatorioPorEmail() {
    return this.EnviarRecordatorioPorEmail;
  }
  /**
   * Sets the EnviarRecordatorioPorEmail of Noticia
   * @method
   * @param {boolean} value - The EnviarRecordatorioPorEmail of Noticia
   * @returns The original Noticia(this object)
   */

  setEnviarRecordatorioPorEmail(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.EnviarRecordatorioPorEmail = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.EnviarRecordatorioPorEmail = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the EnviarRecordatorioPorEmailFecha of Noticia
   * @method
   * @returns {string} The EnviarRecordatorioPorEmailFecha of Noticia
   */
  getEnviarRecordatorioPorEmailFecha() {
    return this.EnviarRecordatorioPorEmailFecha;
  }
  /**
   * Sets the EnviarRecordatorioPorEmailFecha of Noticia
   * @method
   * @param {string} value - The EnviarRecordatorioPorEmailFecha of Noticia
   * @returns The original Noticia(this object)
   */

  setEnviarRecordatorioPorEmailFecha(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.EnviarRecordatorioPorEmailFecha = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Estado of Noticia
   * @method
   * @returns {boolean} The Estado of Noticia
   */
  getEstado() {
    return this.Estado;
  }
  /**
   * Sets the Estado of Noticia
   * @method
   * @param {boolean} value - The Estado of Noticia
   * @returns The original Noticia(this object)
   */

  setEstado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Estado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Estado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class Contrato {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.TipoDeContrato = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Contrato
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createContrato(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Contrato's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Contrato.buscar(this);
  }
  /**
   * Busca Contrato's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findContrato(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Contrato(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      if (
        this.TipoDeContrato == undefined ||
        this.TipoDeContrato == null ||
        this.TipoDeContrato == ""
      ) {
        let response = {
          status: "ERROR",
          code: "RULE_EMPTY_TipoDeContrato",
          description: "TipoDeContrato must not be null or empty",
        };
        reject(response);
        return;
      }
      resolve(updateContrato(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteContrato({ id: this.ID.toString() });
  }
  main_Contrato(args) {
    return main_Contrato(args, this.ID);
  }

  /**
   * Get the TipoDeContrato of Contrato
   * @method
   * @returns {string} The TipoDeContrato of Contrato
   */
  getTipoDeContrato() {
    return this.TipoDeContrato;
  }
  /**
   * Sets the TipoDeContrato of Contrato
   * @method
   * @param {string} value - The TipoDeContrato of Contrato
   * @returns The original Contrato(this object)
   */

  setTipoDeContrato(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.TipoDeContrato = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class TareaOnBoarding {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.NombreDeLaTarea = undefined;
    /**
     * @type {Int}
     */
    this.Asignado = undefined;
    /**
     * @type {Int}
     */
    this.Selecciona = undefined;
    /**
     * @type {Int}
     */
    this.Categoria = undefined;
    /**
     * @type {String}
     */
    this.ColorCategoria = undefined;
    /**
     * @type {String}
     */
    this.Descripcion = undefined;
    /**
     * @type {Int}
     */
    this.CuandoMostrarTarea = undefined;
    /**
     * @type {String}
     */
    this.Cantidad = undefined;
    /**
     * @type {Int}
     */
    this.Periodo = undefined;
    /**
     * @type {Int}
     */
    this.Validador = undefined;
    /**
     * @type {Boolean}
     */
    this.FechaLimite = undefined;
    /**
     * @type {String}
     */
    this.FinalizarEnCantidad = undefined;
    /**
     * @type {Int}
     */
    this.FinalizarPeriodo = undefined;
    /**
     * @type {Int}
     */
    this.FinalizarValidador = undefined;
    /**
     * @type {Boolean}
     */
    this.EstablecerRecordatorio = undefined;
    /**
     * @type {String}
     */
    this.EstablecerRecordatorioCantidad = undefined;
    /**
     * @type {Boolean}
     */
    this.PermitirAdjuntarArchivo = undefined;
    /**
     * @type {FileUpload}
     */
    this.Documento = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto TareaOnBoarding
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createTareaOnBoarding(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca TareaOnBoarding's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return TareaOnBoarding.buscar(this);
  }
  /**
   * Busca TareaOnBoarding's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findTareaOnBoarding(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new TareaOnBoarding(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateTareaOnBoarding(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteTareaOnBoarding({ id: this.ID.toString() });
  }
  main_TareaOnBoarding(args) {
    return main_TareaOnBoarding(args, this.ID);
  }

  assingDocumento(args) {
    return assingDocumentotoTareaOnBoarding(args, this.ID);
  }

  /**
   * Get the NombreDeLaTarea of TareaOnBoarding
   * @method
   * @returns {string} The NombreDeLaTarea of TareaOnBoarding
   */
  getNombreDeLaTarea() {
    return this.NombreDeLaTarea;
  }
  /**
   * Sets the NombreDeLaTarea of TareaOnBoarding
   * @method
   * @param {string} value - The NombreDeLaTarea of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setNombreDeLaTarea(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombreDeLaTarea = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Asignado of TareaOnBoarding
   * @method
   * @returns {number} The Asignado of TareaOnBoarding
   */
  getAsignado() {
    return this.Asignado;
  }
  /**
   * Sets the Asignado of TareaOnBoarding
   * @method
   * @param {number} value - The Asignado of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setAsignado(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Asignado = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Asignado = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Selecciona of TareaOnBoarding
   * @method
   * @returns {number} The Selecciona of TareaOnBoarding
   */
  getSelecciona() {
    return this.Selecciona;
  }
  /**
   * Sets the Selecciona of TareaOnBoarding
   * @method
   * @param {number} value - The Selecciona of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setSelecciona(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Selecciona = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Selecciona = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Categoria of TareaOnBoarding
   * @method
   * @returns {number} The Categoria of TareaOnBoarding
   */
  getCategoria() {
    return this.Categoria;
  }
  /**
   * Sets the Categoria of TareaOnBoarding
   * @method
   * @param {number} value - The Categoria of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setCategoria(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Categoria = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Categoria = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ColorCategoria of TareaOnBoarding
   * @method
   * @returns {string} The ColorCategoria of TareaOnBoarding
   */
  getColorCategoria() {
    return this.ColorCategoria;
  }
  /**
   * Sets the ColorCategoria of TareaOnBoarding
   * @method
   * @param {string} value - The ColorCategoria of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setColorCategoria(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ColorCategoria = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Descripcion of TareaOnBoarding
   * @method
   * @returns {string} The Descripcion of TareaOnBoarding
   */
  getDescripcion() {
    return this.Descripcion;
  }
  /**
   * Sets the Descripcion of TareaOnBoarding
   * @method
   * @param {string} value - The Descripcion of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setDescripcion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Descripcion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CuandoMostrarTarea of TareaOnBoarding
   * @method
   * @returns {number} The CuandoMostrarTarea of TareaOnBoarding
   */
  getCuandoMostrarTarea() {
    return this.CuandoMostrarTarea;
  }
  /**
   * Sets the CuandoMostrarTarea of TareaOnBoarding
   * @method
   * @param {number} value - The CuandoMostrarTarea of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setCuandoMostrarTarea(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.CuandoMostrarTarea = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.CuandoMostrarTarea = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Cantidad of TareaOnBoarding
   * @method
   * @returns {string} The Cantidad of TareaOnBoarding
   */
  getCantidad() {
    return this.Cantidad;
  }
  /**
   * Sets the Cantidad of TareaOnBoarding
   * @method
   * @param {string} value - The Cantidad of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setCantidad(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Cantidad = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Periodo of TareaOnBoarding
   * @method
   * @returns {number} The Periodo of TareaOnBoarding
   */
  getPeriodo() {
    return this.Periodo;
  }
  /**
   * Sets the Periodo of TareaOnBoarding
   * @method
   * @param {number} value - The Periodo of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setPeriodo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Periodo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Periodo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Validador of TareaOnBoarding
   * @method
   * @returns {number} The Validador of TareaOnBoarding
   */
  getValidador() {
    return this.Validador;
  }
  /**
   * Sets the Validador of TareaOnBoarding
   * @method
   * @param {number} value - The Validador of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setValidador(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Validador = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Validador = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FechaLimite of TareaOnBoarding
   * @method
   * @returns {boolean} The FechaLimite of TareaOnBoarding
   */
  getFechaLimite() {
    return this.FechaLimite;
  }
  /**
   * Sets the FechaLimite of TareaOnBoarding
   * @method
   * @param {boolean} value - The FechaLimite of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setFechaLimite(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.FechaLimite = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.FechaLimite = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FinalizarEnCantidad of TareaOnBoarding
   * @method
   * @returns {string} The FinalizarEnCantidad of TareaOnBoarding
   */
  getFinalizarEnCantidad() {
    return this.FinalizarEnCantidad;
  }
  /**
   * Sets the FinalizarEnCantidad of TareaOnBoarding
   * @method
   * @param {string} value - The FinalizarEnCantidad of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setFinalizarEnCantidad(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FinalizarEnCantidad = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FinalizarPeriodo of TareaOnBoarding
   * @method
   * @returns {number} The FinalizarPeriodo of TareaOnBoarding
   */
  getFinalizarPeriodo() {
    return this.FinalizarPeriodo;
  }
  /**
   * Sets the FinalizarPeriodo of TareaOnBoarding
   * @method
   * @param {number} value - The FinalizarPeriodo of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setFinalizarPeriodo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.FinalizarPeriodo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.FinalizarPeriodo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FinalizarValidador of TareaOnBoarding
   * @method
   * @returns {number} The FinalizarValidador of TareaOnBoarding
   */
  getFinalizarValidador() {
    return this.FinalizarValidador;
  }
  /**
   * Sets the FinalizarValidador of TareaOnBoarding
   * @method
   * @param {number} value - The FinalizarValidador of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setFinalizarValidador(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.FinalizarValidador = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.FinalizarValidador = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the EstablecerRecordatorio of TareaOnBoarding
   * @method
   * @returns {boolean} The EstablecerRecordatorio of TareaOnBoarding
   */
  getEstablecerRecordatorio() {
    return this.EstablecerRecordatorio;
  }
  /**
   * Sets the EstablecerRecordatorio of TareaOnBoarding
   * @method
   * @param {boolean} value - The EstablecerRecordatorio of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setEstablecerRecordatorio(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.EstablecerRecordatorio = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.EstablecerRecordatorio = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the EstablecerRecordatorioCantidad of TareaOnBoarding
   * @method
   * @returns {string} The EstablecerRecordatorioCantidad of TareaOnBoarding
   */
  getEstablecerRecordatorioCantidad() {
    return this.EstablecerRecordatorioCantidad;
  }
  /**
   * Sets the EstablecerRecordatorioCantidad of TareaOnBoarding
   * @method
   * @param {string} value - The EstablecerRecordatorioCantidad of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setEstablecerRecordatorioCantidad(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.EstablecerRecordatorioCantidad = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the PermitirAdjuntarArchivo of TareaOnBoarding
   * @method
   * @returns {boolean} The PermitirAdjuntarArchivo of TareaOnBoarding
   */
  getPermitirAdjuntarArchivo() {
    return this.PermitirAdjuntarArchivo;
  }
  /**
   * Sets the PermitirAdjuntarArchivo of TareaOnBoarding
   * @method
   * @param {boolean} value - The PermitirAdjuntarArchivo of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */

  setPermitirAdjuntarArchivo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.PermitirAdjuntarArchivo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.PermitirAdjuntarArchivo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Documento of TareaOnBoarding
   * @method
   * @returns {FileUpload} The Documento of TareaOnBoarding
   */
  getDocumento() {
    return this.Documento;
  }
  /**
   * Sets the Documento of TareaOnBoarding
   * @method
   * @param {FileUpload} value - The Documento of TareaOnBoarding
   * @returns The original TareaOnBoarding(this object)
   */
  setDocumento(value) {
    //object based
    if (value == null || value == undefined || value instanceof FileUpload)
      this.Documento = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Cargo {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.NombreCargo = undefined;
    /**
     * @type {String}
     */
    this.Status = undefined;
    /**
     * @type {Catalogo_Directivos}
     */
    this.Directivo = undefined;
    /**
     * @type {Catalogo_Departamentos}
     */
    this.Departamento = undefined;
    /**
     * @type {Catalogo_SubAreas}
     */
    this.SubArea = undefined;
    /**
     * @type {Array<User>}
     */
    this.Usuarios = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Cargo
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCargo(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Cargo's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Cargo.buscar(this);
  }
  /**
   * Busca Cargo's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCargo(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Cargo(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      if (this.NombreCargo != undefined && this.NombreCargo != null) {
        if (this.NombreCargo.length > 50) {
          let response = {
            status: "ERROR",
            code: "WRONG_SIZE_NombreCargo",
            description: "NombreCargo must be less than 50",
          };
          reject(response);
          return;
        }
      }
      resolve(updateCargo(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCargo({ id: this.ID.toString() });
  }
  main_Cargo(args) {
    return main_Cargo(args, this.ID);
  }

  assingDirectivo(args) {
    return assingDirectivotoCargo(args, this.ID);
  }

  assingDepartamento(args) {
    return assingDepartamentotoCargo(args, this.ID);
  }

  assingSubArea(args) {
    return assingSubAreatoCargo(args, this.ID);
  }

  addUsuarios(args) {
    return addUsuariostoCargo(args, this.ID);
  }

  /**
   * Get the NombreCargo of Cargo
   * @method
   * @returns {string} The NombreCargo of Cargo
   */
  getNombreCargo() {
    return this.NombreCargo;
  }
  /**
   * Sets the NombreCargo of Cargo
   * @method
   * @param {string} value - The NombreCargo of Cargo
   * @returns The original Cargo(this object)
   */

  setNombreCargo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombreCargo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Status of Cargo
   * @method
   * @returns {string} The Status of Cargo
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Cargo
   * @method
   * @param {string} value - The Status of Cargo
   * @returns The original Cargo(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Status = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Directivo of Cargo
   * @method
   * @returns {Catalogo_Directivos} The Directivo of Cargo
   */
  getDirectivo() {
    return this.Directivo;
  }
  /**
   * Sets the Directivo of Cargo
   * @method
   * @param {Catalogo_Directivos} value - The Directivo of Cargo
   * @returns The original Cargo(this object)
   */
  setDirectivo(value) {
    //object based
    if (
      value == null ||
      value == undefined ||
      value instanceof Catalogo_Directivos
    )
      this.Directivo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Departamento of Cargo
   * @method
   * @returns {Catalogo_Departamentos} The Departamento of Cargo
   */
  getDepartamento() {
    return this.Departamento;
  }
  /**
   * Sets the Departamento of Cargo
   * @method
   * @param {Catalogo_Departamentos} value - The Departamento of Cargo
   * @returns The original Cargo(this object)
   */
  setDepartamento(value) {
    //object based
    if (
      value == null ||
      value == undefined ||
      value instanceof Catalogo_Departamentos
    )
      this.Departamento = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the SubArea of Cargo
   * @method
   * @returns {Catalogo_SubAreas} The SubArea of Cargo
   */
  getSubArea() {
    return this.SubArea;
  }
  /**
   * Sets the SubArea of Cargo
   * @method
   * @param {Catalogo_SubAreas} value - The SubArea of Cargo
   * @returns The original Cargo(this object)
   */
  setSubArea(value) {
    //object based
    if (
      value == null ||
      value == undefined ||
      value instanceof Catalogo_SubAreas
    )
      this.SubArea = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class RegistroAusencia {
  constructor(obj) {
    /**
     * @type {User}
     */
    this.Solicitador = undefined;
    /**
     * @type {User}
     */
    this.Beneficiado = undefined;
    /**
     * @type {Ausencia}
     */
    this.TipoDeAusencia = undefined;
    /**
     * @type {Date}
     */
    this.FechaDeSolicitud = undefined;
    /**
     * @type {Date}
     */
    this.FechaAprobada = undefined;
    /**
     * @type {Date}
     */
    this.FechaSolicitadaInicio = undefined;
    /**
     * @type {Date}
     */
    this.FechaSolicitadaFin = undefined;
    /**
     * @type {Int}
     */
    this.DiasSolicitados = undefined;
    /**
     * @type {User}
     */
    this.AprobadoPor = undefined;
    /**
     * @type {Array<FileUpload>}
     */
    this.Adjunto = [];
    /**
     * @type {Boolean}
     */
    this.GoceSueldo = undefined;
    /**
     * @type {String}
     */
    this.Motivo = undefined;
    /**
     * @type {String}
     */
    this.Observaciones = undefined;
    /**
     * @type {Date}
     */
    this.FechaRecuperadaInicio = undefined;
    /**
     * @type {Date}
     */
    this.FechaRecuperadaFin = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto RegistroAusencia
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createRegistroAusencia(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca RegistroAusencia's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return RegistroAusencia.buscar(this);
  }
  /**
   * Busca RegistroAusencia's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findRegistroAusencia(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new RegistroAusencia(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateRegistroAusencia(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteRegistroAusencia({ id: this.ID.toString() });
  }
  main_RegistroAusencia(args) {
    return main_RegistroAusencia(args, this.ID);
  }

  assingSolicitador(args) {
    return assingSolicitadortoRegistroAusencia(args, this.ID);
  }

  assingBeneficiado(args) {
    return assingBeneficiadotoRegistroAusencia(args, this.ID);
  }

  assingTipoDeAusencia(args) {
    return assingTipoDeAusenciatoRegistroAusencia(args, this.ID);
  }

  assingAprobadoPor(args) {
    return assingAprobadoPortoRegistroAusencia(args, this.ID);
  }

  addAdjunto(args) {
    return addAdjuntotoRegistroAusencia(args, this.ID);
  }

  /**
   * Get the Solicitador of RegistroAusencia
   * @method
   * @returns {User} The Solicitador of RegistroAusencia
   */
  getSolicitador() {
    return this.Solicitador;
  }
  /**
   * Sets the Solicitador of RegistroAusencia
   * @method
   * @param {User} value - The Solicitador of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */
  setSolicitador(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.Solicitador = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Beneficiado of RegistroAusencia
   * @method
   * @returns {User} The Beneficiado of RegistroAusencia
   */
  getBeneficiado() {
    return this.Beneficiado;
  }
  /**
   * Sets the Beneficiado of RegistroAusencia
   * @method
   * @param {User} value - The Beneficiado of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */
  setBeneficiado(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.Beneficiado = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoDeAusencia of RegistroAusencia
   * @method
   * @returns {Ausencia} The TipoDeAusencia of RegistroAusencia
   */
  getTipoDeAusencia() {
    return this.TipoDeAusencia;
  }
  /**
   * Sets the TipoDeAusencia of RegistroAusencia
   * @method
   * @param {Ausencia} value - The TipoDeAusencia of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */
  setTipoDeAusencia(value) {
    //object based
    if (value == null || value == undefined || value instanceof Ausencia)
      this.TipoDeAusencia = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaDeSolicitud of RegistroAusencia
   * @method
   * @returns {string} The FechaDeSolicitud of RegistroAusencia
   */
  getFechaDeSolicitud() {
    return this.FechaDeSolicitud;
  }
  /**
   * Sets the FechaDeSolicitud of RegistroAusencia
   * @method
   * @param {string} value - The FechaDeSolicitud of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setFechaDeSolicitud(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaDeSolicitud = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaAprobada of RegistroAusencia
   * @method
   * @returns {string} The FechaAprobada of RegistroAusencia
   */
  getFechaAprobada() {
    return this.FechaAprobada;
  }
  /**
   * Sets the FechaAprobada of RegistroAusencia
   * @method
   * @param {string} value - The FechaAprobada of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setFechaAprobada(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaAprobada = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaSolicitadaInicio of RegistroAusencia
   * @method
   * @returns {string} The FechaSolicitadaInicio of RegistroAusencia
   */
  getFechaSolicitadaInicio() {
    return this.FechaSolicitadaInicio;
  }
  /**
   * Sets the FechaSolicitadaInicio of RegistroAusencia
   * @method
   * @param {string} value - The FechaSolicitadaInicio of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setFechaSolicitadaInicio(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaSolicitadaInicio = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaSolicitadaFin of RegistroAusencia
   * @method
   * @returns {string} The FechaSolicitadaFin of RegistroAusencia
   */
  getFechaSolicitadaFin() {
    return this.FechaSolicitadaFin;
  }
  /**
   * Sets the FechaSolicitadaFin of RegistroAusencia
   * @method
   * @param {string} value - The FechaSolicitadaFin of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setFechaSolicitadaFin(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaSolicitadaFin = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the DiasSolicitados of RegistroAusencia
   * @method
   * @returns {number} The DiasSolicitados of RegistroAusencia
   */
  getDiasSolicitados() {
    return this.DiasSolicitados;
  }
  /**
   * Sets the DiasSolicitados of RegistroAusencia
   * @method
   * @param {number} value - The DiasSolicitados of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setDiasSolicitados(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.DiasSolicitados = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.DiasSolicitados = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the AprobadoPor of RegistroAusencia
   * @method
   * @returns {User} The AprobadoPor of RegistroAusencia
   */
  getAprobadoPor() {
    return this.AprobadoPor;
  }
  /**
   * Sets the AprobadoPor of RegistroAusencia
   * @method
   * @param {User} value - The AprobadoPor of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */
  setAprobadoPor(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.AprobadoPor = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the GoceSueldo of RegistroAusencia
   * @method
   * @returns {boolean} The GoceSueldo of RegistroAusencia
   */
  getGoceSueldo() {
    return this.GoceSueldo;
  }
  /**
   * Sets the GoceSueldo of RegistroAusencia
   * @method
   * @param {boolean} value - The GoceSueldo of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setGoceSueldo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.GoceSueldo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.GoceSueldo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Motivo of RegistroAusencia
   * @method
   * @returns {string} The Motivo of RegistroAusencia
   */
  getMotivo() {
    return this.Motivo;
  }
  /**
   * Sets the Motivo of RegistroAusencia
   * @method
   * @param {string} value - The Motivo of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setMotivo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Motivo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Observaciones of RegistroAusencia
   * @method
   * @returns {string} The Observaciones of RegistroAusencia
   */
  getObservaciones() {
    return this.Observaciones;
  }
  /**
   * Sets the Observaciones of RegistroAusencia
   * @method
   * @param {string} value - The Observaciones of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setObservaciones(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Observaciones = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaRecuperadaInicio of RegistroAusencia
   * @method
   * @returns {string} The FechaRecuperadaInicio of RegistroAusencia
   */
  getFechaRecuperadaInicio() {
    return this.FechaRecuperadaInicio;
  }
  /**
   * Sets the FechaRecuperadaInicio of RegistroAusencia
   * @method
   * @param {string} value - The FechaRecuperadaInicio of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setFechaRecuperadaInicio(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaRecuperadaInicio = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaRecuperadaFin of RegistroAusencia
   * @method
   * @returns {string} The FechaRecuperadaFin of RegistroAusencia
   */
  getFechaRecuperadaFin() {
    return this.FechaRecuperadaFin;
  }
  /**
   * Sets the FechaRecuperadaFin of RegistroAusencia
   * @method
   * @param {string} value - The FechaRecuperadaFin of RegistroAusencia
   * @returns The original RegistroAusencia(this object)
   */

  setFechaRecuperadaFin(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaRecuperadaFin = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Ausencia {
  constructor(obj) {
    /**
     * @type {Int}
     */
    this.Categoria = undefined;
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {String}
     */
    this.IdAusencia = undefined;
    /**
     * @type {Int}
     */
    this.Color = undefined;
    /**
     * @type {String}
     */
    this.Icono = undefined;
    /**
     * @type {Int}
     */
    this.UnidadDeTiempo = undefined;
    /**
     * @type {Boolean}
     */
    this.Limitado = undefined;
    /**
     * @type {Boolean}
     */
    this.LimitadoRecuperados = undefined;
    /**
     * @type {Boolean}
     */
    this.LimitadoVeces = undefined;
    /**
     * @type {Boolean}
     */
    this.Mostrar = undefined;
    /**
     * @type {Int}
     */
    this.Renovacion = undefined;
    /**
     * @type {Int}
     */
    this.Dia = undefined;
    /**
     * @type {Int}
     */
    this.Mes = undefined;
    /**
     * @type {Boolean}
     */
    this.Prorreateado = undefined;
    /**
     * @type {Boolean}
     */
    this.FechaIni = undefined;
    /**
     * @type {Boolean}
     */
    this.FechaFin = undefined;
    /**
     * @type {Int}
     */
    this.DiasAdicionales = undefined;
    /**
     * @type {Int}
     */
    this.Antiguedad = undefined;
    /**
     * @type {Boolean}
     */
    this.SolicitudLimitado = undefined;
    /**
     * @type {Boolean}
     */
    this.VacaAnti = undefined;
    /**
     * @type {Int}
     */
    this.DiasAnti = undefined;
    /**
     * @type {Boolean}
     */
    this.Estado = undefined;
    /**
     * @type {Date}
     */
    this.FechaActivacion = undefined;
    /**
     * @type {Date}
     */
    this.FechaFinalizacion = undefined;
    /**
     * @type {Int}
     */
    this.IdGrupo = undefined;
    /**
     * @type {Int}
     */
    this.IdElementoGrupo = undefined;
    /**
     * @type {Int}
     */
    this.NumeroDias = undefined;
    /**
     * @type {Int}
     */
    this.Caducan = undefined;
    /**
     * @type {Int}
     */
    this.numDias = undefined;
    /**
     * @type {Int}
     */
    this.nameUni = undefined;
    /**
     * @type {Int}
     */
    this.NumSolicitud = undefined;
    /**
     * @type {Boolean}
     */
    this.SolicitarPasadas = undefined;
    /**
     * @type {Boolean}
     */
    this.SolicitarAnticipadas = undefined;
    /**
     * @type {Int}
     */
    this.No_recuperados = undefined;
    /**
     * @type {Int}
     */
    this.Solicitud = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Ausencia
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createAusencia(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Ausencia's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Ausencia.buscar(this);
  }
  /**
   * Busca Ausencia's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findAusencia(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Ausencia(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      if (this.Nombre != undefined && this.Nombre != null) {
        if (this.Nombre.length > 100) {
          let response = {
            status: "ERROR",
            code: "WRONG_SIZE_Nombre",
            description: "Nombre must be less than 100",
          };
          reject(response);
          return;
        }
      }
      resolve(updateAusencia(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteAusencia({ id: this.ID.toString() });
  }
  main_Ausencia(args) {
    return main_Ausencia(args, this.ID);
  }

  /**
   * Get the Categoria of Ausencia
   * @method
   * @returns {number} The Categoria of Ausencia
   */
  getCategoria() {
    return this.Categoria;
  }
  /**
   * Sets the Categoria of Ausencia
   * @method
   * @param {number} value - The Categoria of Ausencia
   * @returns The original Ausencia(this object)
   */

  setCategoria(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Categoria = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Categoria = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Nombre of Ausencia
   * @method
   * @returns {string} The Nombre of Ausencia
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Ausencia
   * @method
   * @param {string} value - The Nombre of Ausencia
   * @returns The original Ausencia(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the IdAusencia of Ausencia
   * @method
   * @returns {string} The IdAusencia of Ausencia
   */
  getIdAusencia() {
    return this.IdAusencia;
  }
  /**
   * Sets the IdAusencia of Ausencia
   * @method
   * @param {string} value - The IdAusencia of Ausencia
   * @returns The original Ausencia(this object)
   */

  setIdAusencia(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.IdAusencia = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Color of Ausencia
   * @method
   * @returns {number} The Color of Ausencia
   */
  getColor() {
    return this.Color;
  }
  /**
   * Sets the Color of Ausencia
   * @method
   * @param {number} value - The Color of Ausencia
   * @returns The original Ausencia(this object)
   */

  setColor(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Color = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Color = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Icono of Ausencia
   * @method
   * @returns {string} The Icono of Ausencia
   */
  getIcono() {
    return this.Icono;
  }
  /**
   * Sets the Icono of Ausencia
   * @method
   * @param {string} value - The Icono of Ausencia
   * @returns The original Ausencia(this object)
   */

  setIcono(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Icono = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the UnidadDeTiempo of Ausencia
   * @method
   * @returns {number} The UnidadDeTiempo of Ausencia
   */
  getUnidadDeTiempo() {
    return this.UnidadDeTiempo;
  }
  /**
   * Sets the UnidadDeTiempo of Ausencia
   * @method
   * @param {number} value - The UnidadDeTiempo of Ausencia
   * @returns The original Ausencia(this object)
   */

  setUnidadDeTiempo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.UnidadDeTiempo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.UnidadDeTiempo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Limitado of Ausencia
   * @method
   * @returns {boolean} The Limitado of Ausencia
   */
  getLimitado() {
    return this.Limitado;
  }
  /**
   * Sets the Limitado of Ausencia
   * @method
   * @param {boolean} value - The Limitado of Ausencia
   * @returns The original Ausencia(this object)
   */

  setLimitado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Limitado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Limitado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LimitadoRecuperados of Ausencia
   * @method
   * @returns {boolean} The LimitadoRecuperados of Ausencia
   */
  getLimitadoRecuperados() {
    return this.LimitadoRecuperados;
  }
  /**
   * Sets the LimitadoRecuperados of Ausencia
   * @method
   * @param {boolean} value - The LimitadoRecuperados of Ausencia
   * @returns The original Ausencia(this object)
   */

  setLimitadoRecuperados(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LimitadoRecuperados = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LimitadoRecuperados = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LimitadoVeces of Ausencia
   * @method
   * @returns {boolean} The LimitadoVeces of Ausencia
   */
  getLimitadoVeces() {
    return this.LimitadoVeces;
  }
  /**
   * Sets the LimitadoVeces of Ausencia
   * @method
   * @param {boolean} value - The LimitadoVeces of Ausencia
   * @returns The original Ausencia(this object)
   */

  setLimitadoVeces(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LimitadoVeces = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LimitadoVeces = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Mostrar of Ausencia
   * @method
   * @returns {boolean} The Mostrar of Ausencia
   */
  getMostrar() {
    return this.Mostrar;
  }
  /**
   * Sets the Mostrar of Ausencia
   * @method
   * @param {boolean} value - The Mostrar of Ausencia
   * @returns The original Ausencia(this object)
   */

  setMostrar(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Mostrar = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Mostrar = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Renovacion of Ausencia
   * @method
   * @returns {number} The Renovacion of Ausencia
   */
  getRenovacion() {
    return this.Renovacion;
  }
  /**
   * Sets the Renovacion of Ausencia
   * @method
   * @param {number} value - The Renovacion of Ausencia
   * @returns The original Ausencia(this object)
   */

  setRenovacion(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Renovacion = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Renovacion = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Dia of Ausencia
   * @method
   * @returns {number} The Dia of Ausencia
   */
  getDia() {
    return this.Dia;
  }
  /**
   * Sets the Dia of Ausencia
   * @method
   * @param {number} value - The Dia of Ausencia
   * @returns The original Ausencia(this object)
   */

  setDia(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Dia = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Dia = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Mes of Ausencia
   * @method
   * @returns {number} The Mes of Ausencia
   */
  getMes() {
    return this.Mes;
  }
  /**
   * Sets the Mes of Ausencia
   * @method
   * @param {number} value - The Mes of Ausencia
   * @returns The original Ausencia(this object)
   */

  setMes(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Mes = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Mes = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Prorreateado of Ausencia
   * @method
   * @returns {boolean} The Prorreateado of Ausencia
   */
  getProrreateado() {
    return this.Prorreateado;
  }
  /**
   * Sets the Prorreateado of Ausencia
   * @method
   * @param {boolean} value - The Prorreateado of Ausencia
   * @returns The original Ausencia(this object)
   */

  setProrreateado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Prorreateado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Prorreateado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FechaIni of Ausencia
   * @method
   * @returns {boolean} The FechaIni of Ausencia
   */
  getFechaIni() {
    return this.FechaIni;
  }
  /**
   * Sets the FechaIni of Ausencia
   * @method
   * @param {boolean} value - The FechaIni of Ausencia
   * @returns The original Ausencia(this object)
   */

  setFechaIni(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.FechaIni = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.FechaIni = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FechaFin of Ausencia
   * @method
   * @returns {boolean} The FechaFin of Ausencia
   */
  getFechaFin() {
    return this.FechaFin;
  }
  /**
   * Sets the FechaFin of Ausencia
   * @method
   * @param {boolean} value - The FechaFin of Ausencia
   * @returns The original Ausencia(this object)
   */

  setFechaFin(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.FechaFin = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.FechaFin = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DiasAdicionales of Ausencia
   * @method
   * @returns {number} The DiasAdicionales of Ausencia
   */
  getDiasAdicionales() {
    return this.DiasAdicionales;
  }
  /**
   * Sets the DiasAdicionales of Ausencia
   * @method
   * @param {number} value - The DiasAdicionales of Ausencia
   * @returns The original Ausencia(this object)
   */

  setDiasAdicionales(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.DiasAdicionales = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.DiasAdicionales = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Antiguedad of Ausencia
   * @method
   * @returns {number} The Antiguedad of Ausencia
   */
  getAntiguedad() {
    return this.Antiguedad;
  }
  /**
   * Sets the Antiguedad of Ausencia
   * @method
   * @param {number} value - The Antiguedad of Ausencia
   * @returns The original Ausencia(this object)
   */

  setAntiguedad(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Antiguedad = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Antiguedad = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the SolicitudLimitado of Ausencia
   * @method
   * @returns {boolean} The SolicitudLimitado of Ausencia
   */
  getSolicitudLimitado() {
    return this.SolicitudLimitado;
  }
  /**
   * Sets the SolicitudLimitado of Ausencia
   * @method
   * @param {boolean} value - The SolicitudLimitado of Ausencia
   * @returns The original Ausencia(this object)
   */

  setSolicitudLimitado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.SolicitudLimitado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.SolicitudLimitado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the VacaAnti of Ausencia
   * @method
   * @returns {boolean} The VacaAnti of Ausencia
   */
  getVacaAnti() {
    return this.VacaAnti;
  }
  /**
   * Sets the VacaAnti of Ausencia
   * @method
   * @param {boolean} value - The VacaAnti of Ausencia
   * @returns The original Ausencia(this object)
   */

  setVacaAnti(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.VacaAnti = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.VacaAnti = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DiasAnti of Ausencia
   * @method
   * @returns {number} The DiasAnti of Ausencia
   */
  getDiasAnti() {
    return this.DiasAnti;
  }
  /**
   * Sets the DiasAnti of Ausencia
   * @method
   * @param {number} value - The DiasAnti of Ausencia
   * @returns The original Ausencia(this object)
   */

  setDiasAnti(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.DiasAnti = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.DiasAnti = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Estado of Ausencia
   * @method
   * @returns {boolean} The Estado of Ausencia
   */
  getEstado() {
    return this.Estado;
  }
  /**
   * Sets the Estado of Ausencia
   * @method
   * @param {boolean} value - The Estado of Ausencia
   * @returns The original Ausencia(this object)
   */

  setEstado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Estado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Estado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FechaActivacion of Ausencia
   * @method
   * @returns {string} The FechaActivacion of Ausencia
   */
  getFechaActivacion() {
    return this.FechaActivacion;
  }
  /**
   * Sets the FechaActivacion of Ausencia
   * @method
   * @param {string} value - The FechaActivacion of Ausencia
   * @returns The original Ausencia(this object)
   */

  setFechaActivacion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaActivacion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaFinalizacion of Ausencia
   * @method
   * @returns {string} The FechaFinalizacion of Ausencia
   */
  getFechaFinalizacion() {
    return this.FechaFinalizacion;
  }
  /**
   * Sets the FechaFinalizacion of Ausencia
   * @method
   * @param {string} value - The FechaFinalizacion of Ausencia
   * @returns The original Ausencia(this object)
   */

  setFechaFinalizacion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaFinalizacion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the IdGrupo of Ausencia
   * @method
   * @returns {number} The IdGrupo of Ausencia
   */
  getIdGrupo() {
    return this.IdGrupo;
  }
  /**
   * Sets the IdGrupo of Ausencia
   * @method
   * @param {number} value - The IdGrupo of Ausencia
   * @returns The original Ausencia(this object)
   */

  setIdGrupo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.IdGrupo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.IdGrupo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the IdElementoGrupo of Ausencia
   * @method
   * @returns {number} The IdElementoGrupo of Ausencia
   */
  getIdElementoGrupo() {
    return this.IdElementoGrupo;
  }
  /**
   * Sets the IdElementoGrupo of Ausencia
   * @method
   * @param {number} value - The IdElementoGrupo of Ausencia
   * @returns The original Ausencia(this object)
   */

  setIdElementoGrupo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.IdElementoGrupo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.IdElementoGrupo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NumeroDias of Ausencia
   * @method
   * @returns {number} The NumeroDias of Ausencia
   */
  getNumeroDias() {
    return this.NumeroDias;
  }
  /**
   * Sets the NumeroDias of Ausencia
   * @method
   * @param {number} value - The NumeroDias of Ausencia
   * @returns The original Ausencia(this object)
   */

  setNumeroDias(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.NumeroDias = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.NumeroDias = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Caducan of Ausencia
   * @method
   * @returns {number} The Caducan of Ausencia
   */
  getCaducan() {
    return this.Caducan;
  }
  /**
   * Sets the Caducan of Ausencia
   * @method
   * @param {number} value - The Caducan of Ausencia
   * @returns The original Ausencia(this object)
   */

  setCaducan(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Caducan = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Caducan = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the numDias of Ausencia
   * @method
   * @returns {number} The numDias of Ausencia
   */
  getnumDias() {
    return this.numDias;
  }
  /**
   * Sets the numDias of Ausencia
   * @method
   * @param {number} value - The numDias of Ausencia
   * @returns The original Ausencia(this object)
   */

  setnumDias(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.numDias = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.numDias = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the nameUni of Ausencia
   * @method
   * @returns {number} The nameUni of Ausencia
   */
  getnameUni() {
    return this.nameUni;
  }
  /**
   * Sets the nameUni of Ausencia
   * @method
   * @param {number} value - The nameUni of Ausencia
   * @returns The original Ausencia(this object)
   */

  setnameUni(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.nameUni = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.nameUni = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NumSolicitud of Ausencia
   * @method
   * @returns {number} The NumSolicitud of Ausencia
   */
  getNumSolicitud() {
    return this.NumSolicitud;
  }
  /**
   * Sets the NumSolicitud of Ausencia
   * @method
   * @param {number} value - The NumSolicitud of Ausencia
   * @returns The original Ausencia(this object)
   */

  setNumSolicitud(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.NumSolicitud = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.NumSolicitud = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the SolicitarPasadas of Ausencia
   * @method
   * @returns {boolean} The SolicitarPasadas of Ausencia
   */
  getSolicitarPasadas() {
    return this.SolicitarPasadas;
  }
  /**
   * Sets the SolicitarPasadas of Ausencia
   * @method
   * @param {boolean} value - The SolicitarPasadas of Ausencia
   * @returns The original Ausencia(this object)
   */

  setSolicitarPasadas(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.SolicitarPasadas = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.SolicitarPasadas = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the SolicitarAnticipadas of Ausencia
   * @method
   * @returns {boolean} The SolicitarAnticipadas of Ausencia
   */
  getSolicitarAnticipadas() {
    return this.SolicitarAnticipadas;
  }
  /**
   * Sets the SolicitarAnticipadas of Ausencia
   * @method
   * @param {boolean} value - The SolicitarAnticipadas of Ausencia
   * @returns The original Ausencia(this object)
   */

  setSolicitarAnticipadas(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.SolicitarAnticipadas = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.SolicitarAnticipadas = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the No_recuperados of Ausencia
   * @method
   * @returns {number} The No_recuperados of Ausencia
   */
  getNo_recuperados() {
    return this.No_recuperados;
  }
  /**
   * Sets the No_recuperados of Ausencia
   * @method
   * @param {number} value - The No_recuperados of Ausencia
   * @returns The original Ausencia(this object)
   */

  setNo_recuperados(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.No_recuperados = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.No_recuperados = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Solicitud of Ausencia
   * @method
   * @returns {number} The Solicitud of Ausencia
   */
  getSolicitud() {
    return this.Solicitud;
  }
  /**
   * Sets the Solicitud of Ausencia
   * @method
   * @param {number} value - The Solicitud of Ausencia
   * @returns The original Ausencia(this object)
   */

  setSolicitud(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Solicitud = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Solicitud = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class Comentario {
  constructor(obj) {
    /**
     * @type {User}
     */
    this.Usuario = undefined;
    /**
     * @type {String}
     */
    this.Contenido = undefined;
    /**
     * @type {String}
     */
    this.Reacciones = undefined;
    /**
     * @type {Array<FileUpload>}
     */
    this.Archivos = [];
    /**
     * @type {Array<Comentario>}
     */
    this.Comentarios = [];
    /**
     * @type {Date}
     */
    this.Fecha = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Comentario
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createComentario(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Comentario's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Comentario.buscar(this);
  }
  /**
   * Busca Comentario's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findComentario(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Comentario(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateComentario(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteComentario({ id: this.ID.toString() });
  }
  main_Comentario(args) {
    return main_Comentario(args, this.ID);
  }

  assingUsuario(args) {
    return assingUsuariotoComentario(args, this.ID);
  }

  addArchivos(args) {
    return addArchivostoComentario(args, this.ID);
  }

  addComentarios(args) {
    return addComentariostoComentario(args, this.ID);
  }

  /**
   * Get the Usuario of Comentario
   * @method
   * @returns {User} The Usuario of Comentario
   */
  getUsuario() {
    return this.Usuario;
  }
  /**
   * Sets the Usuario of Comentario
   * @method
   * @param {User} value - The Usuario of Comentario
   * @returns The original Comentario(this object)
   */
  setUsuario(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.Usuario = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Contenido of Comentario
   * @method
   * @returns {string} The Contenido of Comentario
   */
  getContenido() {
    return this.Contenido;
  }
  /**
   * Sets the Contenido of Comentario
   * @method
   * @param {string} value - The Contenido of Comentario
   * @returns The original Comentario(this object)
   */

  setContenido(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Contenido = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Reacciones of Comentario
   * @method
   * @returns {string} The Reacciones of Comentario
   */
  getReacciones() {
    return this.Reacciones;
  }
  /**
   * Sets the Reacciones of Comentario
   * @method
   * @param {string} value - The Reacciones of Comentario
   * @returns The original Comentario(this object)
   */

  setReacciones(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Reacciones = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Fecha of Comentario
   * @method
   * @returns {string} The Fecha of Comentario
   */
  getFecha() {
    return this.Fecha;
  }
  /**
   * Sets the Fecha of Comentario
   * @method
   * @param {string} value - The Fecha of Comentario
   * @returns The original Comentario(this object)
   */

  setFecha(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Fecha = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Registro {
  constructor(obj) {
    /**
     * @type {Int}
     */
    this.Tipo = undefined;
    /**
     * @type {Date}
     */
    this.Fecha = undefined;
    /**
     * @type {User}
     */
    this.Usuario = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Registro
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createRegistro(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Registro's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Registro.buscar(this);
  }
  /**
   * Busca Registro's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findRegistro(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Registro(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateRegistro(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteRegistro({ id: this.ID.toString() });
  }
  main_Registro(args) {
    return main_Registro(args, this.ID);
  }

  assingUsuario(args) {
    return assingUsuariotoRegistro(args, this.ID);
  }

  /**
   * Get the Tipo of Registro
   * @method
   * @returns {number} The Tipo of Registro
   */
  getTipo() {
    return this.Tipo;
  }
  /**
   * Sets the Tipo of Registro
   * @method
   * @param {number} value - The Tipo of Registro
   * @returns The original Registro(this object)
   */

  setTipo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Tipo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Tipo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Fecha of Registro
   * @method
   * @returns {string} The Fecha of Registro
   */
  getFecha() {
    return this.Fecha;
  }
  /**
   * Sets the Fecha of Registro
   * @method
   * @param {string} value - The Fecha of Registro
   * @returns The original Registro(this object)
   */

  setFecha(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Fecha = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Usuario of Registro
   * @method
   * @returns {User} The Usuario of Registro
   */
  getUsuario() {
    return this.Usuario;
  }
  /**
   * Sets the Usuario of Registro
   * @method
   * @param {User} value - The Usuario of Registro
   * @returns The original Registro(this object)
   */
  setUsuario(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.Usuario = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class ConfiguracionRetardos {
  constructor(obj) {
    /**
     * @type {Boolean}
     */
    this.Activo = undefined;
    /**
     * @type {Boolean}
     */
    this.ProducirregistroEntrada = undefined;
    /**
     * @type {String}
     */
    this.NumeroRetardosAFaltas = undefined;
    /**
     * @type {Int}
     */
    this.NumeroRetardosPor = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto ConfiguracionRetardos
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createConfiguracionRetardos(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca ConfiguracionRetardos's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return ConfiguracionRetardos.buscar(this);
  }
  /**
   * Busca ConfiguracionRetardos's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findConfiguracionRetardos(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new ConfiguracionRetardos(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateConfiguracionRetardos(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteConfiguracionRetardos({ id: this.ID.toString() });
  }
  main_ConfiguracionRetardos(args) {
    return main_ConfiguracionRetardos(args, this.ID);
  }

  /**
   * Get the Activo of ConfiguracionRetardos
   * @method
   * @returns {boolean} The Activo of ConfiguracionRetardos
   */
  getActivo() {
    return this.Activo;
  }
  /**
   * Sets the Activo of ConfiguracionRetardos
   * @method
   * @param {boolean} value - The Activo of ConfiguracionRetardos
   * @returns The original ConfiguracionRetardos(this object)
   */

  setActivo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Activo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Activo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ProducirregistroEntrada of ConfiguracionRetardos
   * @method
   * @returns {boolean} The ProducirregistroEntrada of ConfiguracionRetardos
   */
  getProducirregistroEntrada() {
    return this.ProducirregistroEntrada;
  }
  /**
   * Sets the ProducirregistroEntrada of ConfiguracionRetardos
   * @method
   * @param {boolean} value - The ProducirregistroEntrada of ConfiguracionRetardos
   * @returns The original ConfiguracionRetardos(this object)
   */

  setProducirregistroEntrada(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.ProducirregistroEntrada = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.ProducirregistroEntrada = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NumeroRetardosAFaltas of ConfiguracionRetardos
   * @method
   * @returns {string} The NumeroRetardosAFaltas of ConfiguracionRetardos
   */
  getNumeroRetardosAFaltas() {
    return this.NumeroRetardosAFaltas;
  }
  /**
   * Sets the NumeroRetardosAFaltas of ConfiguracionRetardos
   * @method
   * @param {string} value - The NumeroRetardosAFaltas of ConfiguracionRetardos
   * @returns The original ConfiguracionRetardos(this object)
   */

  setNumeroRetardosAFaltas(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NumeroRetardosAFaltas = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the NumeroRetardosPor of ConfiguracionRetardos
   * @method
   * @returns {number} The NumeroRetardosPor of ConfiguracionRetardos
   */
  getNumeroRetardosPor() {
    return this.NumeroRetardosPor;
  }
  /**
   * Sets the NumeroRetardosPor of ConfiguracionRetardos
   * @method
   * @param {number} value - The NumeroRetardosPor of ConfiguracionRetardos
   * @returns The original ConfiguracionRetardos(this object)
   */

  setNumeroRetardosPor(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.NumeroRetardosPor = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.NumeroRetardosPor = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class JornadaExcepcion {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {String}
     */
    this.Descripcion = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraLunes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMartes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMiercoles = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraJueves = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraViernes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraSabado = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraDomingo = undefined;
    /**
     * @type {Boolean}
     */
    this.DuracionDeJornada = undefined;
    /**
     * @type {String}
     */
    this.HrsLaborales = undefined;
    /**
     * @type {String}
     */
    this.MinLaborales = undefined;
    /**
     * @type {Int}
     */
    this.TiposHorasLaborables = undefined;
    /**
     * @type {String}
     */
    this.HoraEntradaMinima = undefined;
    /**
     * @type {String}
     */
    this.HoraEntradaMaxima = undefined;
    /**
     * @type {String}
     */
    this.HoraComidaMinima = undefined;
    /**
     * @type {String}
     */
    this.HoraComidaMaxima = undefined;
    /**
     * @type {String}
     */
    this.HoraSalidaMinima = undefined;
    /**
     * @type {String}
     */
    this.HoraSalidaMaxima = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto JornadaExcepcion
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createJornadaExcepcion(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca JornadaExcepcion's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return JornadaExcepcion.buscar(this);
  }
  /**
   * Busca JornadaExcepcion's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findJornadaExcepcion(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new JornadaExcepcion(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      if (this.Nombre != undefined && this.Nombre != null) {
        if (this.Nombre.length > 50) {
          let response = {
            status: "ERROR",
            code: "WRONG_SIZE_Nombre",
            description: "Nombre must be less than 50",
          };
          reject(response);
          return;
        }
      }
      resolve(updateJornadaExcepcion(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteJornadaExcepcion({ id: this.ID.toString() });
  }
  main_JornadaExcepcion(args) {
    return main_JornadaExcepcion(args, this.ID);
  }

  /**
   * Get the Nombre of JornadaExcepcion
   * @method
   * @returns {string} The Nombre of JornadaExcepcion
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of JornadaExcepcion
   * @method
   * @param {string} value - The Nombre of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Descripcion of JornadaExcepcion
   * @method
   * @returns {string} The Descripcion of JornadaExcepcion
   */
  getDescripcion() {
    return this.Descripcion;
  }
  /**
   * Sets the Descripcion of JornadaExcepcion
   * @method
   * @param {string} value - The Descripcion of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setDescripcion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Descripcion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the LaboraLunes of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraLunes of JornadaExcepcion
   */
  getLaboraLunes() {
    return this.LaboraLunes;
  }
  /**
   * Sets the LaboraLunes of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraLunes of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraLunes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraLunes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraLunes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMartes of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraMartes of JornadaExcepcion
   */
  getLaboraMartes() {
    return this.LaboraMartes;
  }
  /**
   * Sets the LaboraMartes of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraMartes of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraMartes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMartes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMartes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMiercoles of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraMiercoles of JornadaExcepcion
   */
  getLaboraMiercoles() {
    return this.LaboraMiercoles;
  }
  /**
   * Sets the LaboraMiercoles of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraMiercoles of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraMiercoles(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMiercoles = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMiercoles = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraJueves of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraJueves of JornadaExcepcion
   */
  getLaboraJueves() {
    return this.LaboraJueves;
  }
  /**
   * Sets the LaboraJueves of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraJueves of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraJueves(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraJueves = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraJueves = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraViernes of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraViernes of JornadaExcepcion
   */
  getLaboraViernes() {
    return this.LaboraViernes;
  }
  /**
   * Sets the LaboraViernes of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraViernes of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraViernes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraViernes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraViernes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraSabado of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraSabado of JornadaExcepcion
   */
  getLaboraSabado() {
    return this.LaboraSabado;
  }
  /**
   * Sets the LaboraSabado of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraSabado of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraSabado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraSabado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraSabado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraDomingo of JornadaExcepcion
   * @method
   * @returns {boolean} The LaboraDomingo of JornadaExcepcion
   */
  getLaboraDomingo() {
    return this.LaboraDomingo;
  }
  /**
   * Sets the LaboraDomingo of JornadaExcepcion
   * @method
   * @param {boolean} value - The LaboraDomingo of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setLaboraDomingo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraDomingo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraDomingo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DuracionDeJornada of JornadaExcepcion
   * @method
   * @returns {boolean} The DuracionDeJornada of JornadaExcepcion
   */
  getDuracionDeJornada() {
    return this.DuracionDeJornada;
  }
  /**
   * Sets the DuracionDeJornada of JornadaExcepcion
   * @method
   * @param {boolean} value - The DuracionDeJornada of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setDuracionDeJornada(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.DuracionDeJornada = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.DuracionDeJornada = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HrsLaborales of JornadaExcepcion
   * @method
   * @returns {string} The HrsLaborales of JornadaExcepcion
   */
  getHrsLaborales() {
    return this.HrsLaborales;
  }
  /**
   * Sets the HrsLaborales of JornadaExcepcion
   * @method
   * @param {string} value - The HrsLaborales of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHrsLaborales(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HrsLaborales = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the MinLaborales of JornadaExcepcion
   * @method
   * @returns {string} The MinLaborales of JornadaExcepcion
   */
  getMinLaborales() {
    return this.MinLaborales;
  }
  /**
   * Sets the MinLaborales of JornadaExcepcion
   * @method
   * @param {string} value - The MinLaborales of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setMinLaborales(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.MinLaborales = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TiposHorasLaborables of JornadaExcepcion
   * @method
   * @returns {number} The TiposHorasLaborables of JornadaExcepcion
   */
  getTiposHorasLaborables() {
    return this.TiposHorasLaborables;
  }
  /**
   * Sets the TiposHorasLaborables of JornadaExcepcion
   * @method
   * @param {number} value - The TiposHorasLaborables of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setTiposHorasLaborables(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TiposHorasLaborables = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TiposHorasLaborables = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HoraEntradaMinima of JornadaExcepcion
   * @method
   * @returns {string} The HoraEntradaMinima of JornadaExcepcion
   */
  getHoraEntradaMinima() {
    return this.HoraEntradaMinima;
  }
  /**
   * Sets the HoraEntradaMinima of JornadaExcepcion
   * @method
   * @param {string} value - The HoraEntradaMinima of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHoraEntradaMinima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraEntradaMinima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraEntradaMaxima of JornadaExcepcion
   * @method
   * @returns {string} The HoraEntradaMaxima of JornadaExcepcion
   */
  getHoraEntradaMaxima() {
    return this.HoraEntradaMaxima;
  }
  /**
   * Sets the HoraEntradaMaxima of JornadaExcepcion
   * @method
   * @param {string} value - The HoraEntradaMaxima of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHoraEntradaMaxima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraEntradaMaxima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraComidaMinima of JornadaExcepcion
   * @method
   * @returns {string} The HoraComidaMinima of JornadaExcepcion
   */
  getHoraComidaMinima() {
    return this.HoraComidaMinima;
  }
  /**
   * Sets the HoraComidaMinima of JornadaExcepcion
   * @method
   * @param {string} value - The HoraComidaMinima of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHoraComidaMinima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraComidaMinima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraComidaMaxima of JornadaExcepcion
   * @method
   * @returns {string} The HoraComidaMaxima of JornadaExcepcion
   */
  getHoraComidaMaxima() {
    return this.HoraComidaMaxima;
  }
  /**
   * Sets the HoraComidaMaxima of JornadaExcepcion
   * @method
   * @param {string} value - The HoraComidaMaxima of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHoraComidaMaxima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraComidaMaxima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraSalidaMinima of JornadaExcepcion
   * @method
   * @returns {string} The HoraSalidaMinima of JornadaExcepcion
   */
  getHoraSalidaMinima() {
    return this.HoraSalidaMinima;
  }
  /**
   * Sets the HoraSalidaMinima of JornadaExcepcion
   * @method
   * @param {string} value - The HoraSalidaMinima of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHoraSalidaMinima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraSalidaMinima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraSalidaMaxima of JornadaExcepcion
   * @method
   * @returns {string} The HoraSalidaMaxima of JornadaExcepcion
   */
  getHoraSalidaMaxima() {
    return this.HoraSalidaMaxima;
  }
  /**
   * Sets the HoraSalidaMaxima of JornadaExcepcion
   * @method
   * @param {string} value - The HoraSalidaMaxima of JornadaExcepcion
   * @returns The original JornadaExcepcion(this object)
   */

  setHoraSalidaMaxima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraSalidaMaxima = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Jornada {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {Array<ConfiguracionJornadaEspecifica>}
     */
    this.Config = [];
    /**
     * @type {Array<ConfiguracionJornadaEspecifica>}
     */
    this.ConifEsp = [];
    /**
     * @type {Boolean}
     */
    this.ActivarRetardo = undefined;
    /**
     * @type {Int}
     */
    this.MinRetardos = undefined;
    /**
     * @type {Int}
     */
    this.NumRetardos = undefined;
    /**
     * @type {Int}
     */
    this.PeriodoRetardo = undefined;
    /**
     * @type {Boolean}
     */
    this.Status = undefined;
    /**
     * @type {Array<User>}
     */
    this.Usuarios = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Jornada
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createJornada(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Jornada's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Jornada.buscar(this);
  }
  /**
   * Busca Jornada's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findJornada(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Jornada(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      if (this.Nombre != undefined && this.Nombre != null) {
        if (this.Nombre.length > 50) {
          let response = {
            status: "ERROR",
            code: "WRONG_SIZE_Nombre",
            description: "Nombre must be less than 50",
          };
          reject(response);
          return;
        }
      }
      if (
        this.Nombre == undefined ||
        this.Nombre == null ||
        this.Nombre == ""
      ) {
        let response = {
          status: "ERROR",
          code: "RULE_EMPTY_Nombre",
          description: "Nombre must not be null or empty",
        };
        reject(response);
        return;
      }
      resolve(updateJornada(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteJornada({ id: this.ID.toString() });
  }
  main_Jornada(args) {
    return main_Jornada(args, this.ID);
  }

  addConfig(args) {
    return addConfigtoJornada(args, this.ID);
  }

  addConifEsp(args) {
    return addConifEsptoJornada(args, this.ID);
  }

  addUsuarios(args) {
    return addUsuariostoJornada(args, this.ID);
  }

  /**
   * Get the Nombre of Jornada
   * @method
   * @returns {string} The Nombre of Jornada
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Jornada
   * @method
   * @param {string} value - The Nombre of Jornada
   * @returns The original Jornada(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the ActivarRetardo of Jornada
   * @method
   * @returns {boolean} The ActivarRetardo of Jornada
   */
  getActivarRetardo() {
    return this.ActivarRetardo;
  }
  /**
   * Sets the ActivarRetardo of Jornada
   * @method
   * @param {boolean} value - The ActivarRetardo of Jornada
   * @returns The original Jornada(this object)
   */

  setActivarRetardo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.ActivarRetardo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.ActivarRetardo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the MinRetardos of Jornada
   * @method
   * @returns {number} The MinRetardos of Jornada
   */
  getMinRetardos() {
    return this.MinRetardos;
  }
  /**
   * Sets the MinRetardos of Jornada
   * @method
   * @param {number} value - The MinRetardos of Jornada
   * @returns The original Jornada(this object)
   */

  setMinRetardos(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.MinRetardos = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.MinRetardos = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NumRetardos of Jornada
   * @method
   * @returns {number} The NumRetardos of Jornada
   */
  getNumRetardos() {
    return this.NumRetardos;
  }
  /**
   * Sets the NumRetardos of Jornada
   * @method
   * @param {number} value - The NumRetardos of Jornada
   * @returns The original Jornada(this object)
   */

  setNumRetardos(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.NumRetardos = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.NumRetardos = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the PeriodoRetardo of Jornada
   * @method
   * @returns {number} The PeriodoRetardo of Jornada
   */
  getPeriodoRetardo() {
    return this.PeriodoRetardo;
  }
  /**
   * Sets the PeriodoRetardo of Jornada
   * @method
   * @param {number} value - The PeriodoRetardo of Jornada
   * @returns The original Jornada(this object)
   */

  setPeriodoRetardo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.PeriodoRetardo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.PeriodoRetardo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Status of Jornada
   * @method
   * @returns {boolean} The Status of Jornada
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Jornada
   * @method
   * @param {boolean} value - The Status of Jornada
   * @returns The original Jornada(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Status = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Status = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class ConfiguracionJornadaEspecifica {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Titulo = undefined;
    /**
     * @type {String}
     */
    this.Descripcion = undefined;
    /**
     * @type {Date}
     */
    this.FechaExcepcionIni = undefined;
    /**
     * @type {Date}
     */
    this.FechaExcepcionFin = undefined;
    /**
     * @type {Boolean}
     */
    this.FechaExcepcion = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraLunes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMartes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMiercoles = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraJueves = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraViernes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraSabado = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraDomingo = undefined;
    /**
     * @type {Boolean}
     */
    this.DuracionDeJornada = undefined;
    /**
     * @type {String}
     */
    this.HrsLaborales = undefined;
    /**
     * @type {String}
     */
    this.MinLaborales = undefined;
    /**
     * @type {Int}
     */
    this.Horario = undefined;
    /**
     * @type {String}
     */
    this.HoraEntradaMinima = undefined;
    /**
     * @type {String}
     */
    this.HoraEntradaMaxima = undefined;
    /**
     * @type {String}
     */
    this.HoraComidaMinima = undefined;
    /**
     * @type {String}
     */
    this.HoraComidaMaxima = undefined;
    /**
     * @type {String}
     */
    this.HoraSalidaMinima = undefined;
    /**
     * @type {String}
     */
    this.HoraSalidaMaxima = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto ConfiguracionJornadaEspecifica
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createConfiguracionJornadaEspecifica(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca ConfiguracionJornadaEspecifica's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return ConfiguracionJornadaEspecifica.buscar(this);
  }
  /**
   * Busca ConfiguracionJornadaEspecifica's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findConfiguracionJornadaEspecifica(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new ConfiguracionJornadaEspecifica(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateConfiguracionJornadaEspecifica(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteConfiguracionJornadaEspecifica({ id: this.ID.toString() });
  }
  main_ConfiguracionJornadaEspecifica(args) {
    return main_ConfiguracionJornadaEspecifica(args, this.ID);
  }

  /**
   * Get the Titulo of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The Titulo of ConfiguracionJornadaEspecifica
   */
  getTitulo() {
    return this.Titulo;
  }
  /**
   * Sets the Titulo of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The Titulo of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setTitulo(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Titulo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Descripcion of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The Descripcion of ConfiguracionJornadaEspecifica
   */
  getDescripcion() {
    return this.Descripcion;
  }
  /**
   * Sets the Descripcion of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The Descripcion of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setDescripcion(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Descripcion = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaExcepcionIni of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The FechaExcepcionIni of ConfiguracionJornadaEspecifica
   */
  getFechaExcepcionIni() {
    return this.FechaExcepcionIni;
  }
  /**
   * Sets the FechaExcepcionIni of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The FechaExcepcionIni of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setFechaExcepcionIni(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaExcepcionIni = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaExcepcionFin of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The FechaExcepcionFin of ConfiguracionJornadaEspecifica
   */
  getFechaExcepcionFin() {
    return this.FechaExcepcionFin;
  }
  /**
   * Sets the FechaExcepcionFin of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The FechaExcepcionFin of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setFechaExcepcionFin(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaExcepcionFin = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaExcepcion of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The FechaExcepcion of ConfiguracionJornadaEspecifica
   */
  getFechaExcepcion() {
    return this.FechaExcepcion;
  }
  /**
   * Sets the FechaExcepcion of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The FechaExcepcion of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setFechaExcepcion(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.FechaExcepcion = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.FechaExcepcion = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraLunes of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraLunes of ConfiguracionJornadaEspecifica
   */
  getLaboraLunes() {
    return this.LaboraLunes;
  }
  /**
   * Sets the LaboraLunes of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraLunes of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraLunes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraLunes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraLunes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMartes of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraMartes of ConfiguracionJornadaEspecifica
   */
  getLaboraMartes() {
    return this.LaboraMartes;
  }
  /**
   * Sets the LaboraMartes of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraMartes of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraMartes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMartes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMartes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMiercoles of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraMiercoles of ConfiguracionJornadaEspecifica
   */
  getLaboraMiercoles() {
    return this.LaboraMiercoles;
  }
  /**
   * Sets the LaboraMiercoles of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraMiercoles of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraMiercoles(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMiercoles = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMiercoles = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraJueves of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraJueves of ConfiguracionJornadaEspecifica
   */
  getLaboraJueves() {
    return this.LaboraJueves;
  }
  /**
   * Sets the LaboraJueves of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraJueves of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraJueves(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraJueves = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraJueves = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraViernes of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraViernes of ConfiguracionJornadaEspecifica
   */
  getLaboraViernes() {
    return this.LaboraViernes;
  }
  /**
   * Sets the LaboraViernes of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraViernes of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraViernes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraViernes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraViernes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraSabado of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraSabado of ConfiguracionJornadaEspecifica
   */
  getLaboraSabado() {
    return this.LaboraSabado;
  }
  /**
   * Sets the LaboraSabado of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraSabado of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraSabado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraSabado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraSabado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraDomingo of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The LaboraDomingo of ConfiguracionJornadaEspecifica
   */
  getLaboraDomingo() {
    return this.LaboraDomingo;
  }
  /**
   * Sets the LaboraDomingo of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The LaboraDomingo of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setLaboraDomingo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraDomingo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraDomingo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DuracionDeJornada of ConfiguracionJornadaEspecifica
   * @method
   * @returns {boolean} The DuracionDeJornada of ConfiguracionJornadaEspecifica
   */
  getDuracionDeJornada() {
    return this.DuracionDeJornada;
  }
  /**
   * Sets the DuracionDeJornada of ConfiguracionJornadaEspecifica
   * @method
   * @param {boolean} value - The DuracionDeJornada of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setDuracionDeJornada(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.DuracionDeJornada = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.DuracionDeJornada = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HrsLaborales of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HrsLaborales of ConfiguracionJornadaEspecifica
   */
  getHrsLaborales() {
    return this.HrsLaborales;
  }
  /**
   * Sets the HrsLaborales of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HrsLaborales of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHrsLaborales(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HrsLaborales = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the MinLaborales of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The MinLaborales of ConfiguracionJornadaEspecifica
   */
  getMinLaborales() {
    return this.MinLaborales;
  }
  /**
   * Sets the MinLaborales of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The MinLaborales of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setMinLaborales(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.MinLaborales = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Horario of ConfiguracionJornadaEspecifica
   * @method
   * @returns {number} The Horario of ConfiguracionJornadaEspecifica
   */
  getHorario() {
    return this.Horario;
  }
  /**
   * Sets the Horario of ConfiguracionJornadaEspecifica
   * @method
   * @param {number} value - The Horario of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHorario(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Horario = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Horario = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HoraEntradaMinima of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HoraEntradaMinima of ConfiguracionJornadaEspecifica
   */
  getHoraEntradaMinima() {
    return this.HoraEntradaMinima;
  }
  /**
   * Sets the HoraEntradaMinima of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HoraEntradaMinima of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHoraEntradaMinima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraEntradaMinima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraEntradaMaxima of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HoraEntradaMaxima of ConfiguracionJornadaEspecifica
   */
  getHoraEntradaMaxima() {
    return this.HoraEntradaMaxima;
  }
  /**
   * Sets the HoraEntradaMaxima of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HoraEntradaMaxima of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHoraEntradaMaxima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraEntradaMaxima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraComidaMinima of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HoraComidaMinima of ConfiguracionJornadaEspecifica
   */
  getHoraComidaMinima() {
    return this.HoraComidaMinima;
  }
  /**
   * Sets the HoraComidaMinima of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HoraComidaMinima of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHoraComidaMinima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraComidaMinima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraComidaMaxima of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HoraComidaMaxima of ConfiguracionJornadaEspecifica
   */
  getHoraComidaMaxima() {
    return this.HoraComidaMaxima;
  }
  /**
   * Sets the HoraComidaMaxima of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HoraComidaMaxima of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHoraComidaMaxima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraComidaMaxima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraSalidaMinima of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HoraSalidaMinima of ConfiguracionJornadaEspecifica
   */
  getHoraSalidaMinima() {
    return this.HoraSalidaMinima;
  }
  /**
   * Sets the HoraSalidaMinima of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HoraSalidaMinima of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHoraSalidaMinima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraSalidaMinima = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the HoraSalidaMaxima of ConfiguracionJornadaEspecifica
   * @method
   * @returns {string} The HoraSalidaMaxima of ConfiguracionJornadaEspecifica
   */
  getHoraSalidaMaxima() {
    return this.HoraSalidaMaxima;
  }
  /**
   * Sets the HoraSalidaMaxima of ConfiguracionJornadaEspecifica
   * @method
   * @param {string} value - The HoraSalidaMaxima of ConfiguracionJornadaEspecifica
   * @returns The original ConfiguracionJornadaEspecifica(this object)
   */

  setHoraSalidaMaxima(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HoraSalidaMaxima = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Usuario {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.NombrePreferido = undefined;
    /**
     * @type {Boolean}
     */
    this.EsGestorDeVacaciones = undefined;
    /**
     * @type {Boolean}
     */
    this.EsJefe = undefined;
    /**
     * @type {Int}
     */
    this.Status = undefined;
    /**
     * @type {User}
     */
    this.SabuesoUser = undefined;
    /**
     * @type {Date}
     */
    this.FechaDeNacimiento = undefined;
    /**
     * @type {String}
     */
    this.LugarDeNacimiento = undefined;
    /**
     * @type {Int}
     */
    this.TipoDeDoc = undefined;
    /**
     * @type {String}
     */
    this.NumeroDoc = undefined;
    /**
     * @type {String}
     */
    this.NumeroDeSeguridadSocial = undefined;
    /**
     * @type {String}
     */
    this.RFC = undefined;
    /**
     * @type {Int}
     */
    this.EstadoCivil = undefined;
    /**
     * @type {String}
     */
    this.NumeroDeHijos = undefined;
    /**
     * @type {String}
     */
    this.Genero = undefined;
    /**
     * @type {Int}
     */
    this.TipoDeSangre = undefined;
    /**
     * @type {String}
     */
    this.Discapacidad = undefined;
    /**
     * @type {String}
     */
    this.RestriccionesSalud = undefined;
    /**
     * @type {Int}
     */
    this.TipoTelefono = undefined;
    /**
     * @type {String}
     */
    this.Telefono = undefined;
    /**
     * @type {String}
     */
    this.CelularLada = undefined;
    /**
     * @type {String}
     */
    this.EmailPersonal = undefined;
    /**
     * @type {String}
     */
    this.NombreContactEmergencia = undefined;
    /**
     * @type {String}
     */
    this.RelacionContactEmergency = undefined;
    /**
     * @type {Int}
     */
    this.TipoTelefonoContactEmergency = undefined;
    /**
     * @type {String}
     */
    this.ContactEmergencyLada = undefined;
    /**
     * @type {String}
     */
    this.TelefonoContactEmergency = undefined;
    /**
     * @type {String}
     */
    this.EmailContactEmergency = undefined;
    /**
     * @type {String}
     */
    this.DireccionEmergency = undefined;
    /**
     * @type {Date}
     */
    this.FechaEntrada = undefined;
    /**
     * @type {String}
     */
    this.IdEmpleado = undefined;
    /**
     * @type {Int}
     */
    this.Puesto = undefined;
    /**
     * @type {Int}
     */
    this.Departamento = undefined;
    /**
     * @type {Int}
     */
    this.Directivo = undefined;
    /**
     * @type {User}
     */
    this.Responsable = undefined;
    /**
     * @type {User}
     */
    this.GestorVacaciones = undefined;
    /**
     * @type {User}
     */
    this.SegGestorVacaciones = undefined;
    /**
     * @type {Date}
     */
    this.FechaInicioPuestoActual = undefined;
    /**
     * @type {Int}
     */
    this.TipoDePuesto = undefined;
    /**
     * @type {Int}
     */
    this.TipoDePersonal = undefined;
    /**
     * @type {Int}
     */
    this.TipoJornada = undefined;
    /**
     * @type {Boolean}
     */
    this.RotacionDeTurnos = undefined;
    /**
     * @type {String}
     */
    this.JornadaLaboral = undefined;
    /**
     * @type {Int}
     */
    this.ProfesionalTipoDeTelefono = undefined;
    /**
     * @type {String}
     */
    this.ProfesionalTelefono = undefined;
    /**
     * @type {String}
     */
    this.ProfesionalEmail = undefined;
    /**
     * @type {Boolean}
     */
    this.RecibirComunicados = undefined;
    /**
     * @type {Int}
     */
    this.TipoContrato = undefined;
    /**
     * @type {Date}
     */
    this.FechaFinPeriodoPrueba = undefined;
    /**
     * @type {Date}
     */
    this.FechaFinContrato = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraLunes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMartes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraMiercoles = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraJueves = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraViernes = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraSabado = undefined;
    /**
     * @type {Boolean}
     */
    this.LaboraDomingo = undefined;
    /**
     * @type {String}
     */
    this.HrsLaborales = undefined;
    /**
     * @type {String}
     */
    this.MinLaborales = undefined;
    /**
     * @type {Int}
     */
    this.TiposHorasLaborables = undefined;
    /**
     * @type {String}
     */
    this.ComentarioHorasLaborables = undefined;
    /**
     * @type {Date}
     */
    this.FechaEfectoSalario = undefined;
    /**
     * @type {String}
     */
    this.Importe = undefined;
    /**
     * @type {Int}
     */
    this.Motivo = undefined;
    /**
     * @type {Int}
     */
    this.DiasDisponibles = undefined;
    /**
     * @type {Int}
     */
    this.DiasRestantes = undefined;
    /**
     * @type {Date}
     */
    this.FechaRenovacionVacaciones = undefined;
    /**
     * @type {Array<Jornada>}
     */
    this.Jornadas = [];
    /**
     * @type {Array<Registro>}
     */
    this.Registros = [];
    /**
     * @type {Array<RegistroAusencia>}
     */
    this.Ausencias = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Usuario
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createUsuario(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Usuario's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Usuario.buscar(this);
  }
  /**
   * Busca Usuario's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findUsuario(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Usuario(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateUsuario(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteUsuario({ id: this.ID.toString() });
  }
  main_Usuario(args) {
    return main_Usuario(args, this.ID);
  }

  assingSabuesoUser(args) {
    return assingSabuesoUsertoUsuario(args, this.ID);
  }

  assingResponsable(args) {
    return assingResponsabletoUsuario(args, this.ID);
  }

  assingGestorVacaciones(args) {
    return assingGestorVacacionestoUsuario(args, this.ID);
  }

  assingSegGestorVacaciones(args) {
    return assingSegGestorVacacionestoUsuario(args, this.ID);
  }

  addJornadas(args) {
    return addJornadastoUsuario(args, this.ID);
  }

  addRegistros(args) {
    return addRegistrostoUsuario(args, this.ID);
  }

  addAusencias(args) {
    return addAusenciastoUsuario(args, this.ID);
  }

  /**
   * Get the NombrePreferido of Usuario
   * @method
   * @returns {string} The NombrePreferido of Usuario
   */
  getNombrePreferido() {
    return this.NombrePreferido;
  }
  /**
   * Sets the NombrePreferido of Usuario
   * @method
   * @param {string} value - The NombrePreferido of Usuario
   * @returns The original Usuario(this object)
   */

  setNombrePreferido(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombrePreferido = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the EsGestorDeVacaciones of Usuario
   * @method
   * @returns {boolean} The EsGestorDeVacaciones of Usuario
   */
  getEsGestorDeVacaciones() {
    return this.EsGestorDeVacaciones;
  }
  /**
   * Sets the EsGestorDeVacaciones of Usuario
   * @method
   * @param {boolean} value - The EsGestorDeVacaciones of Usuario
   * @returns The original Usuario(this object)
   */

  setEsGestorDeVacaciones(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.EsGestorDeVacaciones = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.EsGestorDeVacaciones = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the EsJefe of Usuario
   * @method
   * @returns {boolean} The EsJefe of Usuario
   */
  getEsJefe() {
    return this.EsJefe;
  }
  /**
   * Sets the EsJefe of Usuario
   * @method
   * @param {boolean} value - The EsJefe of Usuario
   * @returns The original Usuario(this object)
   */

  setEsJefe(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.EsJefe = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.EsJefe = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Status of Usuario
   * @method
   * @returns {number} The Status of Usuario
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Usuario
   * @method
   * @param {number} value - The Status of Usuario
   * @returns The original Usuario(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Status = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Status = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the SabuesoUser of Usuario
   * @method
   * @returns {User} The SabuesoUser of Usuario
   */
  getSabuesoUser() {
    return this.SabuesoUser;
  }
  /**
   * Sets the SabuesoUser of Usuario
   * @method
   * @param {User} value - The SabuesoUser of Usuario
   * @returns The original Usuario(this object)
   */
  setSabuesoUser(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.SabuesoUser = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaDeNacimiento of Usuario
   * @method
   * @returns {string} The FechaDeNacimiento of Usuario
   */
  getFechaDeNacimiento() {
    return this.FechaDeNacimiento;
  }
  /**
   * Sets the FechaDeNacimiento of Usuario
   * @method
   * @param {string} value - The FechaDeNacimiento of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaDeNacimiento(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaDeNacimiento = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the LugarDeNacimiento of Usuario
   * @method
   * @returns {string} The LugarDeNacimiento of Usuario
   */
  getLugarDeNacimiento() {
    return this.LugarDeNacimiento;
  }
  /**
   * Sets the LugarDeNacimiento of Usuario
   * @method
   * @param {string} value - The LugarDeNacimiento of Usuario
   * @returns The original Usuario(this object)
   */

  setLugarDeNacimiento(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.LugarDeNacimiento = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoDeDoc of Usuario
   * @method
   * @returns {number} The TipoDeDoc of Usuario
   */
  getTipoDeDoc() {
    return this.TipoDeDoc;
  }
  /**
   * Sets the TipoDeDoc of Usuario
   * @method
   * @param {number} value - The TipoDeDoc of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoDeDoc(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoDeDoc = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoDeDoc = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NumeroDoc of Usuario
   * @method
   * @returns {string} The NumeroDoc of Usuario
   */
  getNumeroDoc() {
    return this.NumeroDoc;
  }
  /**
   * Sets the NumeroDoc of Usuario
   * @method
   * @param {string} value - The NumeroDoc of Usuario
   * @returns The original Usuario(this object)
   */

  setNumeroDoc(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NumeroDoc = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the NumeroDeSeguridadSocial of Usuario
   * @method
   * @returns {string} The NumeroDeSeguridadSocial of Usuario
   */
  getNumeroDeSeguridadSocial() {
    return this.NumeroDeSeguridadSocial;
  }
  /**
   * Sets the NumeroDeSeguridadSocial of Usuario
   * @method
   * @param {string} value - The NumeroDeSeguridadSocial of Usuario
   * @returns The original Usuario(this object)
   */

  setNumeroDeSeguridadSocial(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NumeroDeSeguridadSocial = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the RFC of Usuario
   * @method
   * @returns {string} The RFC of Usuario
   */
  getRFC() {
    return this.RFC;
  }
  /**
   * Sets the RFC of Usuario
   * @method
   * @param {string} value - The RFC of Usuario
   * @returns The original Usuario(this object)
   */

  setRFC(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.RFC = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the EstadoCivil of Usuario
   * @method
   * @returns {number} The EstadoCivil of Usuario
   */
  getEstadoCivil() {
    return this.EstadoCivil;
  }
  /**
   * Sets the EstadoCivil of Usuario
   * @method
   * @param {number} value - The EstadoCivil of Usuario
   * @returns The original Usuario(this object)
   */

  setEstadoCivil(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.EstadoCivil = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.EstadoCivil = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the NumeroDeHijos of Usuario
   * @method
   * @returns {string} The NumeroDeHijos of Usuario
   */
  getNumeroDeHijos() {
    return this.NumeroDeHijos;
  }
  /**
   * Sets the NumeroDeHijos of Usuario
   * @method
   * @param {string} value - The NumeroDeHijos of Usuario
   * @returns The original Usuario(this object)
   */

  setNumeroDeHijos(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NumeroDeHijos = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Genero of Usuario
   * @method
   * @returns {string} The Genero of Usuario
   */
  getGenero() {
    return this.Genero;
  }
  /**
   * Sets the Genero of Usuario
   * @method
   * @param {string} value - The Genero of Usuario
   * @returns The original Usuario(this object)
   */

  setGenero(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Genero = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoDeSangre of Usuario
   * @method
   * @returns {number} The TipoDeSangre of Usuario
   */
  getTipoDeSangre() {
    return this.TipoDeSangre;
  }
  /**
   * Sets the TipoDeSangre of Usuario
   * @method
   * @param {number} value - The TipoDeSangre of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoDeSangre(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoDeSangre = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoDeSangre = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Discapacidad of Usuario
   * @method
   * @returns {string} The Discapacidad of Usuario
   */
  getDiscapacidad() {
    return this.Discapacidad;
  }
  /**
   * Sets the Discapacidad of Usuario
   * @method
   * @param {string} value - The Discapacidad of Usuario
   * @returns The original Usuario(this object)
   */

  setDiscapacidad(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Discapacidad = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the RestriccionesSalud of Usuario
   * @method
   * @returns {string} The RestriccionesSalud of Usuario
   */
  getRestriccionesSalud() {
    return this.RestriccionesSalud;
  }
  /**
   * Sets the RestriccionesSalud of Usuario
   * @method
   * @param {string} value - The RestriccionesSalud of Usuario
   * @returns The original Usuario(this object)
   */

  setRestriccionesSalud(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.RestriccionesSalud = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoTelefono of Usuario
   * @method
   * @returns {number} The TipoTelefono of Usuario
   */
  getTipoTelefono() {
    return this.TipoTelefono;
  }
  /**
   * Sets the TipoTelefono of Usuario
   * @method
   * @param {number} value - The TipoTelefono of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoTelefono(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoTelefono = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoTelefono = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Telefono of Usuario
   * @method
   * @returns {string} The Telefono of Usuario
   */
  getTelefono() {
    return this.Telefono;
  }
  /**
   * Sets the Telefono of Usuario
   * @method
   * @param {string} value - The Telefono of Usuario
   * @returns The original Usuario(this object)
   */

  setTelefono(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Telefono = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CelularLada of Usuario
   * @method
   * @returns {string} The CelularLada of Usuario
   */
  getCelularLada() {
    return this.CelularLada;
  }
  /**
   * Sets the CelularLada of Usuario
   * @method
   * @param {string} value - The CelularLada of Usuario
   * @returns The original Usuario(this object)
   */

  setCelularLada(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CelularLada = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the EmailPersonal of Usuario
   * @method
   * @returns {string} The EmailPersonal of Usuario
   */
  getEmailPersonal() {
    return this.EmailPersonal;
  }
  /**
   * Sets the EmailPersonal of Usuario
   * @method
   * @param {string} value - The EmailPersonal of Usuario
   * @returns The original Usuario(this object)
   */

  setEmailPersonal(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.EmailPersonal = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the NombreContactEmergencia of Usuario
   * @method
   * @returns {string} The NombreContactEmergencia of Usuario
   */
  getNombreContactEmergencia() {
    return this.NombreContactEmergencia;
  }
  /**
   * Sets the NombreContactEmergencia of Usuario
   * @method
   * @param {string} value - The NombreContactEmergencia of Usuario
   * @returns The original Usuario(this object)
   */

  setNombreContactEmergencia(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.NombreContactEmergencia = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the RelacionContactEmergency of Usuario
   * @method
   * @returns {string} The RelacionContactEmergency of Usuario
   */
  getRelacionContactEmergency() {
    return this.RelacionContactEmergency;
  }
  /**
   * Sets the RelacionContactEmergency of Usuario
   * @method
   * @param {string} value - The RelacionContactEmergency of Usuario
   * @returns The original Usuario(this object)
   */

  setRelacionContactEmergency(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.RelacionContactEmergency = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoTelefonoContactEmergency of Usuario
   * @method
   * @returns {number} The TipoTelefonoContactEmergency of Usuario
   */
  getTipoTelefonoContactEmergency() {
    return this.TipoTelefonoContactEmergency;
  }
  /**
   * Sets the TipoTelefonoContactEmergency of Usuario
   * @method
   * @param {number} value - The TipoTelefonoContactEmergency of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoTelefonoContactEmergency(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoTelefonoContactEmergency = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoTelefonoContactEmergency = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ContactEmergencyLada of Usuario
   * @method
   * @returns {string} The ContactEmergencyLada of Usuario
   */
  getContactEmergencyLada() {
    return this.ContactEmergencyLada;
  }
  /**
   * Sets the ContactEmergencyLada of Usuario
   * @method
   * @param {string} value - The ContactEmergencyLada of Usuario
   * @returns The original Usuario(this object)
   */

  setContactEmergencyLada(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ContactEmergencyLada = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TelefonoContactEmergency of Usuario
   * @method
   * @returns {string} The TelefonoContactEmergency of Usuario
   */
  getTelefonoContactEmergency() {
    return this.TelefonoContactEmergency;
  }
  /**
   * Sets the TelefonoContactEmergency of Usuario
   * @method
   * @param {string} value - The TelefonoContactEmergency of Usuario
   * @returns The original Usuario(this object)
   */

  setTelefonoContactEmergency(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.TelefonoContactEmergency = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the EmailContactEmergency of Usuario
   * @method
   * @returns {string} The EmailContactEmergency of Usuario
   */
  getEmailContactEmergency() {
    return this.EmailContactEmergency;
  }
  /**
   * Sets the EmailContactEmergency of Usuario
   * @method
   * @param {string} value - The EmailContactEmergency of Usuario
   * @returns The original Usuario(this object)
   */

  setEmailContactEmergency(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.EmailContactEmergency = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the DireccionEmergency of Usuario
   * @method
   * @returns {string} The DireccionEmergency of Usuario
   */
  getDireccionEmergency() {
    return this.DireccionEmergency;
  }
  /**
   * Sets the DireccionEmergency of Usuario
   * @method
   * @param {string} value - The DireccionEmergency of Usuario
   * @returns The original Usuario(this object)
   */

  setDireccionEmergency(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.DireccionEmergency = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaEntrada of Usuario
   * @method
   * @returns {string} The FechaEntrada of Usuario
   */
  getFechaEntrada() {
    return this.FechaEntrada;
  }
  /**
   * Sets the FechaEntrada of Usuario
   * @method
   * @param {string} value - The FechaEntrada of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaEntrada(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaEntrada = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the IdEmpleado of Usuario
   * @method
   * @returns {string} The IdEmpleado of Usuario
   */
  getIdEmpleado() {
    return this.IdEmpleado;
  }
  /**
   * Sets the IdEmpleado of Usuario
   * @method
   * @param {string} value - The IdEmpleado of Usuario
   * @returns The original Usuario(this object)
   */

  setIdEmpleado(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.IdEmpleado = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Puesto of Usuario
   * @method
   * @returns {number} The Puesto of Usuario
   */
  getPuesto() {
    return this.Puesto;
  }
  /**
   * Sets the Puesto of Usuario
   * @method
   * @param {number} value - The Puesto of Usuario
   * @returns The original Usuario(this object)
   */

  setPuesto(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Puesto = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Puesto = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Departamento of Usuario
   * @method
   * @returns {number} The Departamento of Usuario
   */
  getDepartamento() {
    return this.Departamento;
  }
  /**
   * Sets the Departamento of Usuario
   * @method
   * @param {number} value - The Departamento of Usuario
   * @returns The original Usuario(this object)
   */

  setDepartamento(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Departamento = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Departamento = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Directivo of Usuario
   * @method
   * @returns {number} The Directivo of Usuario
   */
  getDirectivo() {
    return this.Directivo;
  }
  /**
   * Sets the Directivo of Usuario
   * @method
   * @param {number} value - The Directivo of Usuario
   * @returns The original Usuario(this object)
   */

  setDirectivo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Directivo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Directivo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Responsable of Usuario
   * @method
   * @returns {User} The Responsable of Usuario
   */
  getResponsable() {
    return this.Responsable;
  }
  /**
   * Sets the Responsable of Usuario
   * @method
   * @param {User} value - The Responsable of Usuario
   * @returns The original Usuario(this object)
   */
  setResponsable(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.Responsable = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the GestorVacaciones of Usuario
   * @method
   * @returns {User} The GestorVacaciones of Usuario
   */
  getGestorVacaciones() {
    return this.GestorVacaciones;
  }
  /**
   * Sets the GestorVacaciones of Usuario
   * @method
   * @param {User} value - The GestorVacaciones of Usuario
   * @returns The original Usuario(this object)
   */
  setGestorVacaciones(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.GestorVacaciones = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the SegGestorVacaciones of Usuario
   * @method
   * @returns {User} The SegGestorVacaciones of Usuario
   */
  getSegGestorVacaciones() {
    return this.SegGestorVacaciones;
  }
  /**
   * Sets the SegGestorVacaciones of Usuario
   * @method
   * @param {User} value - The SegGestorVacaciones of Usuario
   * @returns The original Usuario(this object)
   */
  setSegGestorVacaciones(value) {
    //object based
    if (value == null || value == undefined || value instanceof User)
      this.SegGestorVacaciones = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaInicioPuestoActual of Usuario
   * @method
   * @returns {string} The FechaInicioPuestoActual of Usuario
   */
  getFechaInicioPuestoActual() {
    return this.FechaInicioPuestoActual;
  }
  /**
   * Sets the FechaInicioPuestoActual of Usuario
   * @method
   * @param {string} value - The FechaInicioPuestoActual of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaInicioPuestoActual(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaInicioPuestoActual = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TipoDePuesto of Usuario
   * @method
   * @returns {number} The TipoDePuesto of Usuario
   */
  getTipoDePuesto() {
    return this.TipoDePuesto;
  }
  /**
   * Sets the TipoDePuesto of Usuario
   * @method
   * @param {number} value - The TipoDePuesto of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoDePuesto(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoDePuesto = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoDePuesto = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the TipoDePersonal of Usuario
   * @method
   * @returns {number} The TipoDePersonal of Usuario
   */
  getTipoDePersonal() {
    return this.TipoDePersonal;
  }
  /**
   * Sets the TipoDePersonal of Usuario
   * @method
   * @param {number} value - The TipoDePersonal of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoDePersonal(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoDePersonal = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoDePersonal = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the TipoJornada of Usuario
   * @method
   * @returns {number} The TipoJornada of Usuario
   */
  getTipoJornada() {
    return this.TipoJornada;
  }
  /**
   * Sets the TipoJornada of Usuario
   * @method
   * @param {number} value - The TipoJornada of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoJornada(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoJornada = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoJornada = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the RotacionDeTurnos of Usuario
   * @method
   * @returns {boolean} The RotacionDeTurnos of Usuario
   */
  getRotacionDeTurnos() {
    return this.RotacionDeTurnos;
  }
  /**
   * Sets the RotacionDeTurnos of Usuario
   * @method
   * @param {boolean} value - The RotacionDeTurnos of Usuario
   * @returns The original Usuario(this object)
   */

  setRotacionDeTurnos(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.RotacionDeTurnos = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.RotacionDeTurnos = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the JornadaLaboral of Usuario
   * @method
   * @returns {string} The JornadaLaboral of Usuario
   */
  getJornadaLaboral() {
    return this.JornadaLaboral;
  }
  /**
   * Sets the JornadaLaboral of Usuario
   * @method
   * @param {string} value - The JornadaLaboral of Usuario
   * @returns The original Usuario(this object)
   */

  setJornadaLaboral(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.JornadaLaboral = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the ProfesionalTipoDeTelefono of Usuario
   * @method
   * @returns {number} The ProfesionalTipoDeTelefono of Usuario
   */
  getProfesionalTipoDeTelefono() {
    return this.ProfesionalTipoDeTelefono;
  }
  /**
   * Sets the ProfesionalTipoDeTelefono of Usuario
   * @method
   * @param {number} value - The ProfesionalTipoDeTelefono of Usuario
   * @returns The original Usuario(this object)
   */

  setProfesionalTipoDeTelefono(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.ProfesionalTipoDeTelefono = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.ProfesionalTipoDeTelefono = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ProfesionalTelefono of Usuario
   * @method
   * @returns {string} The ProfesionalTelefono of Usuario
   */
  getProfesionalTelefono() {
    return this.ProfesionalTelefono;
  }
  /**
   * Sets the ProfesionalTelefono of Usuario
   * @method
   * @param {string} value - The ProfesionalTelefono of Usuario
   * @returns The original Usuario(this object)
   */

  setProfesionalTelefono(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ProfesionalTelefono = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the ProfesionalEmail of Usuario
   * @method
   * @returns {string} The ProfesionalEmail of Usuario
   */
  getProfesionalEmail() {
    return this.ProfesionalEmail;
  }
  /**
   * Sets the ProfesionalEmail of Usuario
   * @method
   * @param {string} value - The ProfesionalEmail of Usuario
   * @returns The original Usuario(this object)
   */

  setProfesionalEmail(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ProfesionalEmail = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the RecibirComunicados of Usuario
   * @method
   * @returns {boolean} The RecibirComunicados of Usuario
   */
  getRecibirComunicados() {
    return this.RecibirComunicados;
  }
  /**
   * Sets the RecibirComunicados of Usuario
   * @method
   * @param {boolean} value - The RecibirComunicados of Usuario
   * @returns The original Usuario(this object)
   */

  setRecibirComunicados(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.RecibirComunicados = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.RecibirComunicados = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the TipoContrato of Usuario
   * @method
   * @returns {number} The TipoContrato of Usuario
   */
  getTipoContrato() {
    return this.TipoContrato;
  }
  /**
   * Sets the TipoContrato of Usuario
   * @method
   * @param {number} value - The TipoContrato of Usuario
   * @returns The original Usuario(this object)
   */

  setTipoContrato(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TipoContrato = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TipoContrato = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FechaFinPeriodoPrueba of Usuario
   * @method
   * @returns {string} The FechaFinPeriodoPrueba of Usuario
   */
  getFechaFinPeriodoPrueba() {
    return this.FechaFinPeriodoPrueba;
  }
  /**
   * Sets the FechaFinPeriodoPrueba of Usuario
   * @method
   * @param {string} value - The FechaFinPeriodoPrueba of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaFinPeriodoPrueba(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaFinPeriodoPrueba = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaFinContrato of Usuario
   * @method
   * @returns {string} The FechaFinContrato of Usuario
   */
  getFechaFinContrato() {
    return this.FechaFinContrato;
  }
  /**
   * Sets the FechaFinContrato of Usuario
   * @method
   * @param {string} value - The FechaFinContrato of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaFinContrato(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaFinContrato = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the LaboraLunes of Usuario
   * @method
   * @returns {boolean} The LaboraLunes of Usuario
   */
  getLaboraLunes() {
    return this.LaboraLunes;
  }
  /**
   * Sets the LaboraLunes of Usuario
   * @method
   * @param {boolean} value - The LaboraLunes of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraLunes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraLunes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraLunes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMartes of Usuario
   * @method
   * @returns {boolean} The LaboraMartes of Usuario
   */
  getLaboraMartes() {
    return this.LaboraMartes;
  }
  /**
   * Sets the LaboraMartes of Usuario
   * @method
   * @param {boolean} value - The LaboraMartes of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraMartes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMartes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMartes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraMiercoles of Usuario
   * @method
   * @returns {boolean} The LaboraMiercoles of Usuario
   */
  getLaboraMiercoles() {
    return this.LaboraMiercoles;
  }
  /**
   * Sets the LaboraMiercoles of Usuario
   * @method
   * @param {boolean} value - The LaboraMiercoles of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraMiercoles(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraMiercoles = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraMiercoles = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraJueves of Usuario
   * @method
   * @returns {boolean} The LaboraJueves of Usuario
   */
  getLaboraJueves() {
    return this.LaboraJueves;
  }
  /**
   * Sets the LaboraJueves of Usuario
   * @method
   * @param {boolean} value - The LaboraJueves of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraJueves(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraJueves = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraJueves = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraViernes of Usuario
   * @method
   * @returns {boolean} The LaboraViernes of Usuario
   */
  getLaboraViernes() {
    return this.LaboraViernes;
  }
  /**
   * Sets the LaboraViernes of Usuario
   * @method
   * @param {boolean} value - The LaboraViernes of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraViernes(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraViernes = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraViernes = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraSabado of Usuario
   * @method
   * @returns {boolean} The LaboraSabado of Usuario
   */
  getLaboraSabado() {
    return this.LaboraSabado;
  }
  /**
   * Sets the LaboraSabado of Usuario
   * @method
   * @param {boolean} value - The LaboraSabado of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraSabado(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraSabado = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraSabado = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LaboraDomingo of Usuario
   * @method
   * @returns {boolean} The LaboraDomingo of Usuario
   */
  getLaboraDomingo() {
    return this.LaboraDomingo;
  }
  /**
   * Sets the LaboraDomingo of Usuario
   * @method
   * @param {boolean} value - The LaboraDomingo of Usuario
   * @returns The original Usuario(this object)
   */

  setLaboraDomingo(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.LaboraDomingo = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.LaboraDomingo = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the HrsLaborales of Usuario
   * @method
   * @returns {string} The HrsLaborales of Usuario
   */
  getHrsLaborales() {
    return this.HrsLaborales;
  }
  /**
   * Sets the HrsLaborales of Usuario
   * @method
   * @param {string} value - The HrsLaborales of Usuario
   * @returns The original Usuario(this object)
   */

  setHrsLaborales(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.HrsLaborales = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the MinLaborales of Usuario
   * @method
   * @returns {string} The MinLaborales of Usuario
   */
  getMinLaborales() {
    return this.MinLaborales;
  }
  /**
   * Sets the MinLaborales of Usuario
   * @method
   * @param {string} value - The MinLaborales of Usuario
   * @returns The original Usuario(this object)
   */

  setMinLaborales(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.MinLaborales = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TiposHorasLaborables of Usuario
   * @method
   * @returns {number} The TiposHorasLaborables of Usuario
   */
  getTiposHorasLaborables() {
    return this.TiposHorasLaborables;
  }
  /**
   * Sets the TiposHorasLaborables of Usuario
   * @method
   * @param {number} value - The TiposHorasLaborables of Usuario
   * @returns The original Usuario(this object)
   */

  setTiposHorasLaborables(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TiposHorasLaborables = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TiposHorasLaborables = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the ComentarioHorasLaborables of Usuario
   * @method
   * @returns {string} The ComentarioHorasLaborables of Usuario
   */
  getComentarioHorasLaborables() {
    return this.ComentarioHorasLaborables;
  }
  /**
   * Sets the ComentarioHorasLaborables of Usuario
   * @method
   * @param {string} value - The ComentarioHorasLaborables of Usuario
   * @returns The original Usuario(this object)
   */

  setComentarioHorasLaborables(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ComentarioHorasLaborables = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FechaEfectoSalario of Usuario
   * @method
   * @returns {string} The FechaEfectoSalario of Usuario
   */
  getFechaEfectoSalario() {
    return this.FechaEfectoSalario;
  }
  /**
   * Sets the FechaEfectoSalario of Usuario
   * @method
   * @param {string} value - The FechaEfectoSalario of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaEfectoSalario(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaEfectoSalario = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Importe of Usuario
   * @method
   * @returns {string} The Importe of Usuario
   */
  getImporte() {
    return this.Importe;
  }
  /**
   * Sets the Importe of Usuario
   * @method
   * @param {string} value - The Importe of Usuario
   * @returns The original Usuario(this object)
   */

  setImporte(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Importe = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Motivo of Usuario
   * @method
   * @returns {number} The Motivo of Usuario
   */
  getMotivo() {
    return this.Motivo;
  }
  /**
   * Sets the Motivo of Usuario
   * @method
   * @param {number} value - The Motivo of Usuario
   * @returns The original Usuario(this object)
   */

  setMotivo(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Motivo = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Motivo = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DiasDisponibles of Usuario
   * @method
   * @returns {number} The DiasDisponibles of Usuario
   */
  getDiasDisponibles() {
    return this.DiasDisponibles;
  }
  /**
   * Sets the DiasDisponibles of Usuario
   * @method
   * @param {number} value - The DiasDisponibles of Usuario
   * @returns The original Usuario(this object)
   */

  setDiasDisponibles(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.DiasDisponibles = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.DiasDisponibles = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DiasRestantes of Usuario
   * @method
   * @returns {number} The DiasRestantes of Usuario
   */
  getDiasRestantes() {
    return this.DiasRestantes;
  }
  /**
   * Sets the DiasRestantes of Usuario
   * @method
   * @param {number} value - The DiasRestantes of Usuario
   * @returns The original Usuario(this object)
   */

  setDiasRestantes(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.DiasRestantes = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.DiasRestantes = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FechaRenovacionVacaciones of Usuario
   * @method
   * @returns {string} The FechaRenovacionVacaciones of Usuario
   */
  getFechaRenovacionVacaciones() {
    return this.FechaRenovacionVacaciones;
  }
  /**
   * Sets the FechaRenovacionVacaciones of Usuario
   * @method
   * @param {string} value - The FechaRenovacionVacaciones of Usuario
   * @returns The original Usuario(this object)
   */

  setFechaRenovacionVacaciones(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FechaRenovacionVacaciones = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Catalogo_Categoria {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Catalogo_Categoria
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCatalogo_Categoria(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Catalogo_Categoria's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Catalogo_Categoria.buscar(this);
  }
  /**
   * Busca Catalogo_Categoria's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCatalogo_Categoria(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Catalogo_Categoria(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCatalogo_Categoria(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCatalogo_Categoria({ id: this.ID.toString() });
  }
  main_Catalogo_Categoria(args) {
    return main_Catalogo_Categoria(args, this.ID);
  }

  /**
   * Get the Nombre of Catalogo_Categoria
   * @method
   * @returns {string} The Nombre of Catalogo_Categoria
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Catalogo_Categoria
   * @method
   * @param {string} value - The Nombre of Catalogo_Categoria
   * @returns The original Catalogo_Categoria(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  static getAll(callback) {
    return Catalogo_Categoria.buscar({ qwery: "" });
  }
  static getByID(id, callback) {
    return Catalogo_Categoria.buscar({ qwery: id.toString() });
  }
}

export class Catalogo_Grupo {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Catalogo_Grupo
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCatalogo_Grupo(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Catalogo_Grupo's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Catalogo_Grupo.buscar(this);
  }
  /**
   * Busca Catalogo_Grupo's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCatalogo_Grupo(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Catalogo_Grupo(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCatalogo_Grupo(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCatalogo_Grupo({ id: this.ID.toString() });
  }
  main_Catalogo_Grupo(args) {
    return main_Catalogo_Grupo(args, this.ID);
  }

  /**
   * Get the Nombre of Catalogo_Grupo
   * @method
   * @returns {string} The Nombre of Catalogo_Grupo
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Catalogo_Grupo
   * @method
   * @param {string} value - The Nombre of Catalogo_Grupo
   * @returns The original Catalogo_Grupo(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  static getAll(callback) {
    return Catalogo_Grupo.buscar({ qwery: "" });
  }
  static getByID(id, callback) {
    return Catalogo_Grupo.buscar({ qwery: id.toString() });
  }
}

export class Catalogo_Directivos {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {Int}
     */
    this.Status = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Catalogo_Directivos
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCatalogo_Directivos(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Catalogo_Directivos's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Catalogo_Directivos.buscar(this);
  }
  /**
   * Busca Catalogo_Directivos's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCatalogo_Directivos(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Catalogo_Directivos(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCatalogo_Directivos(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCatalogo_Directivos({ id: this.ID.toString() });
  }
  main_Catalogo_Directivos(args) {
    return main_Catalogo_Directivos(args, this.ID);
  }

  /**
   * Get the Nombre of Catalogo_Directivos
   * @method
   * @returns {string} The Nombre of Catalogo_Directivos
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Catalogo_Directivos
   * @method
   * @param {string} value - The Nombre of Catalogo_Directivos
   * @returns The original Catalogo_Directivos(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Status of Catalogo_Directivos
   * @method
   * @returns {number} The Status of Catalogo_Directivos
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Catalogo_Directivos
   * @method
   * @param {number} value - The Status of Catalogo_Directivos
   * @returns The original Catalogo_Directivos(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Status = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Status = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  static getAll(callback) {
    return Catalogo_Directivos.buscar({ qwery: "" });
  }
  static getByID(id, callback) {
    return Catalogo_Directivos.buscar({ qwery: id.toString() });
  }
}

export class Catalogo_Departamentos {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {Int}
     */
    this.Status = undefined;
    /**
     * @type {Catalogo_Directivos}
     */
    this.Directivo = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Catalogo_Departamentos
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCatalogo_Departamentos(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Catalogo_Departamentos's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Catalogo_Departamentos.buscar(this);
  }
  /**
   * Busca Catalogo_Departamentos's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCatalogo_Departamentos(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Catalogo_Departamentos(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCatalogo_Departamentos(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCatalogo_Departamentos({ id: this.ID.toString() });
  }
  main_Catalogo_Departamentos(args) {
    return main_Catalogo_Departamentos(args, this.ID);
  }

  assingDirectivo(args) {
    return assingDirectivotoCatalogo_Departamentos(args, this.ID);
  }

  /**
   * Get the Nombre of Catalogo_Departamentos
   * @method
   * @returns {string} The Nombre of Catalogo_Departamentos
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Catalogo_Departamentos
   * @method
   * @param {string} value - The Nombre of Catalogo_Departamentos
   * @returns The original Catalogo_Departamentos(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Status of Catalogo_Departamentos
   * @method
   * @returns {number} The Status of Catalogo_Departamentos
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Catalogo_Departamentos
   * @method
   * @param {number} value - The Status of Catalogo_Departamentos
   * @returns The original Catalogo_Departamentos(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Status = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Status = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Directivo of Catalogo_Departamentos
   * @method
   * @returns {Catalogo_Directivos} The Directivo of Catalogo_Departamentos
   */
  getDirectivo() {
    return this.Directivo;
  }
  /**
   * Sets the Directivo of Catalogo_Departamentos
   * @method
   * @param {Catalogo_Directivos} value - The Directivo of Catalogo_Departamentos
   * @returns The original Catalogo_Departamentos(this object)
   */
  setDirectivo(value) {
    //object based
    if (
      value == null ||
      value == undefined ||
      value instanceof Catalogo_Directivos
    )
      this.Directivo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  static getAll(callback) {
    return Catalogo_Departamentos.buscar({ qwery: "" });
  }
  static getByID(id, callback) {
    return Catalogo_Departamentos.buscar({ qwery: id.toString() });
  }
}

export class Catalogo_SubAreas {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {Int}
     */
    this.Status = undefined;
    /**
     * @type {Catalogo_Departamentos}
     */
    this.Departamento = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Catalogo_SubAreas
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCatalogo_SubAreas(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Catalogo_SubAreas's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Catalogo_SubAreas.buscar(this);
  }
  /**
   * Busca Catalogo_SubAreas's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCatalogo_SubAreas(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Catalogo_SubAreas(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCatalogo_SubAreas(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCatalogo_SubAreas({ id: this.ID.toString() });
  }
  main_Catalogo_SubAreas(args) {
    return main_Catalogo_SubAreas(args, this.ID);
  }

  assingDepartamento(args) {
    return assingDepartamentotoCatalogo_SubAreas(args, this.ID);
  }

  /**
   * Get the Nombre of Catalogo_SubAreas
   * @method
   * @returns {string} The Nombre of Catalogo_SubAreas
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Catalogo_SubAreas
   * @method
   * @param {string} value - The Nombre of Catalogo_SubAreas
   * @returns The original Catalogo_SubAreas(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Status of Catalogo_SubAreas
   * @method
   * @returns {number} The Status of Catalogo_SubAreas
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Catalogo_SubAreas
   * @method
   * @param {number} value - The Status of Catalogo_SubAreas
   * @returns The original Catalogo_SubAreas(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Status = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Status = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Departamento of Catalogo_SubAreas
   * @method
   * @returns {Catalogo_Departamentos} The Departamento of Catalogo_SubAreas
   */
  getDepartamento() {
    return this.Departamento;
  }
  /**
   * Sets the Departamento of Catalogo_SubAreas
   * @method
   * @param {Catalogo_Departamentos} value - The Departamento of Catalogo_SubAreas
   * @returns The original Catalogo_SubAreas(this object)
   */
  setDepartamento(value) {
    //object based
    if (
      value == null ||
      value == undefined ||
      value instanceof Catalogo_Departamentos
    )
      this.Departamento = value;
    else throw new Error("Wrong value type");
    return this;
  }

  static getAll(callback) {
    return Catalogo_SubAreas.buscar({ qwery: "" });
  }
  static getByID(id, callback) {
    return Catalogo_SubAreas.buscar({ qwery: id.toString() });
  }
}

export class Catalogo_ZonaHoraria {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Catalogo_ZonaHoraria
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createCatalogo_ZonaHoraria(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Catalogo_ZonaHoraria's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Catalogo_ZonaHoraria.buscar(this);
  }
  /**
   * Busca Catalogo_ZonaHoraria's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findCatalogo_ZonaHoraria(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Catalogo_ZonaHoraria(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateCatalogo_ZonaHoraria(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteCatalogo_ZonaHoraria({ id: this.ID.toString() });
  }
  main_Catalogo_ZonaHoraria(args) {
    return main_Catalogo_ZonaHoraria(args, this.ID);
  }

  /**
   * Get the Nombre of Catalogo_ZonaHoraria
   * @method
   * @returns {string} The Nombre of Catalogo_ZonaHoraria
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of Catalogo_ZonaHoraria
   * @method
   * @param {string} value - The Nombre of Catalogo_ZonaHoraria
   * @returns The original Catalogo_ZonaHoraria(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  static getAll(callback) {
    return Catalogo_ZonaHoraria.buscar({ qwery: "" });
  }
  static getByID(id, callback) {
    return Catalogo_ZonaHoraria.buscar({ qwery: id.toString() });
  }
}

export class User {
  constructor(obj) {
    /**
     * @type {Int}
     */
    this.Version = undefined;
    /**
     * @type {String}
     */
    this.AccountExpired = undefined;
    /**
     * @type {String}
     */
    this.AccountLocked = undefined;
    /**
     * @type {Int}
     */
    this.Lang = undefined;
    /**
     * @type {String}
     */
    this.PasswordExpired = undefined;
    /**
     * @type {String}
     */
    this.PasswordHash = undefined;
    /**
     * @type {String}
     */
    this.Unencode = undefined;
    /**
     * @type {String}
     */
    this.Username = undefined;
    /**
     * @type {String}
     */
    this.Materno = undefined;
    /**
     * @type {String}
     */
    this.Paterno = undefined;
    /**
     * @type {String}
     */
    this.Nombre = undefined;
    /**
     * @type {String}
     */
    this.Email = undefined;
    /**
     * @type {String}
     */
    this.Telefono = undefined;
    /**
     * @type {String}
     */
    this.Referencia = undefined;
    /**
     * @type {String}
     */
    this.Photo = undefined;
    /**
     * @type {String}
     */
    this.Gender = undefined;
    /**
     * @type {String}
     */
    this.FecNac = undefined;
    /**
     * @type {String}
     */
    this.Token = undefined;
    /**
     * @type {Int}
     */
    this.AltFirstStat = undefined;
    /**
     * @type {Int}
     */
    this.LayoutVersion = undefined;
    /**
     * @type {Int}
     */
    this.Nacional = undefined;
    /**
     * @type {Address}
     */
    this.Address = undefined;
    /**
     * @type {Role}
     */
    this.Role = undefined;
    /**
     * @type {Int}
     */
    this.IdOrg = undefined;
    /**
     * @type {Usuario}
     */
    this.CommunityUser = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto User
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createUser(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca User's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return User.buscar(this);
  }
  /**
   * Busca User's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findUser(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) => newArray.push(new User(element)));
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateUser(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteUser({ id: this.ID.toString() });
  }
  main_User(args) {
    return main_User(args, this.ID);
  }

  assingAddress(args) {
    return assingAddresstoUser(args, this.ID);
  }

  assingRole(args) {
    return assingRoletoUser(args, this.ID);
  }

  assingCommunityUser(args) {
    return assingCommunityUsertoUser(args, this.ID);
  }

  /**
   * Get the Version of User
   * @method
   * @returns {number} The Version of User
   */
  getVersion() {
    return this.Version;
  }
  /**
   * Sets the Version of User
   * @method
   * @param {number} value - The Version of User
   * @returns The original User(this object)
   */

  setVersion(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Version = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Version = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the AccountExpired of User
   * @method
   * @returns {string} The AccountExpired of User
   */
  getAccountExpired() {
    return this.AccountExpired;
  }
  /**
   * Sets the AccountExpired of User
   * @method
   * @param {string} value - The AccountExpired of User
   * @returns The original User(this object)
   */

  setAccountExpired(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.AccountExpired = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the AccountLocked of User
   * @method
   * @returns {string} The AccountLocked of User
   */
  getAccountLocked() {
    return this.AccountLocked;
  }
  /**
   * Sets the AccountLocked of User
   * @method
   * @param {string} value - The AccountLocked of User
   * @returns The original User(this object)
   */

  setAccountLocked(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.AccountLocked = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Lang of User
   * @method
   * @returns {number} The Lang of User
   */
  getLang() {
    return this.Lang;
  }
  /**
   * Sets the Lang of User
   * @method
   * @param {number} value - The Lang of User
   * @returns The original User(this object)
   */

  setLang(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Lang = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Lang = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the PasswordExpired of User
   * @method
   * @returns {string} The PasswordExpired of User
   */
  getPasswordExpired() {
    return this.PasswordExpired;
  }
  /**
   * Sets the PasswordExpired of User
   * @method
   * @param {string} value - The PasswordExpired of User
   * @returns The original User(this object)
   */

  setPasswordExpired(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.PasswordExpired = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the PasswordHash of User
   * @method
   * @returns {string} The PasswordHash of User
   */
  getPasswordHash() {
    return this.PasswordHash;
  }
  /**
   * Sets the PasswordHash of User
   * @method
   * @param {string} value - The PasswordHash of User
   * @returns The original User(this object)
   */

  setPasswordHash(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.PasswordHash = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Unencode of User
   * @method
   * @returns {string} The Unencode of User
   */
  getUnencode() {
    return this.Unencode;
  }
  /**
   * Sets the Unencode of User
   * @method
   * @param {string} value - The Unencode of User
   * @returns The original User(this object)
   */

  setUnencode(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Unencode = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Username of User
   * @method
   * @returns {string} The Username of User
   */
  getUsername() {
    return this.Username;
  }
  /**
   * Sets the Username of User
   * @method
   * @param {string} value - The Username of User
   * @returns The original User(this object)
   */

  setUsername(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Username = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Materno of User
   * @method
   * @returns {string} The Materno of User
   */
  getMaterno() {
    return this.Materno;
  }
  /**
   * Sets the Materno of User
   * @method
   * @param {string} value - The Materno of User
   * @returns The original User(this object)
   */

  setMaterno(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Materno = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Paterno of User
   * @method
   * @returns {string} The Paterno of User
   */
  getPaterno() {
    return this.Paterno;
  }
  /**
   * Sets the Paterno of User
   * @method
   * @param {string} value - The Paterno of User
   * @returns The original User(this object)
   */

  setPaterno(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Paterno = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Nombre of User
   * @method
   * @returns {string} The Nombre of User
   */
  getNombre() {
    return this.Nombre;
  }
  /**
   * Sets the Nombre of User
   * @method
   * @param {string} value - The Nombre of User
   * @returns The original User(this object)
   */

  setNombre(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Nombre = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Email of User
   * @method
   * @returns {string} The Email of User
   */
  getEmail() {
    return this.Email;
  }
  /**
   * Sets the Email of User
   * @method
   * @param {string} value - The Email of User
   * @returns The original User(this object)
   */

  setEmail(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Email = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Telefono of User
   * @method
   * @returns {string} The Telefono of User
   */
  getTelefono() {
    return this.Telefono;
  }
  /**
   * Sets the Telefono of User
   * @method
   * @param {string} value - The Telefono of User
   * @returns The original User(this object)
   */

  setTelefono(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Telefono = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Referencia of User
   * @method
   * @returns {string} The Referencia of User
   */
  getReferencia() {
    return this.Referencia;
  }
  /**
   * Sets the Referencia of User
   * @method
   * @param {string} value - The Referencia of User
   * @returns The original User(this object)
   */

  setReferencia(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Referencia = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Photo of User
   * @method
   * @returns {string} The Photo of User
   */
  getPhoto() {
    return this.Photo;
  }
  /**
   * Sets the Photo of User
   * @method
   * @param {string} value - The Photo of User
   * @returns The original User(this object)
   */

  setPhoto(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Photo = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Gender of User
   * @method
   * @returns {string} The Gender of User
   */
  getGender() {
    return this.Gender;
  }
  /**
   * Sets the Gender of User
   * @method
   * @param {string} value - The Gender of User
   * @returns The original User(this object)
   */

  setGender(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Gender = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the FecNac of User
   * @method
   * @returns {string} The FecNac of User
   */
  getFecNac() {
    return this.FecNac;
  }
  /**
   * Sets the FecNac of User
   * @method
   * @param {string} value - The FecNac of User
   * @returns The original User(this object)
   */

  setFecNac(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.FecNac = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Token of User
   * @method
   * @returns {string} The Token of User
   */
  getToken() {
    return this.Token;
  }
  /**
   * Sets the Token of User
   * @method
   * @param {string} value - The Token of User
   * @returns The original User(this object)
   */

  setToken(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Token = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the AltFirstStat of User
   * @method
   * @returns {number} The AltFirstStat of User
   */
  getAltFirstStat() {
    return this.AltFirstStat;
  }
  /**
   * Sets the AltFirstStat of User
   * @method
   * @param {number} value - The AltFirstStat of User
   * @returns The original User(this object)
   */

  setAltFirstStat(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.AltFirstStat = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.AltFirstStat = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the LayoutVersion of User
   * @method
   * @returns {number} The LayoutVersion of User
   */
  getLayoutVersion() {
    return this.LayoutVersion;
  }
  /**
   * Sets the LayoutVersion of User
   * @method
   * @param {number} value - The LayoutVersion of User
   * @returns The original User(this object)
   */

  setLayoutVersion(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.LayoutVersion = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.LayoutVersion = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Nacional of User
   * @method
   * @returns {number} The Nacional of User
   */
  getNacional() {
    return this.Nacional;
  }
  /**
   * Sets the Nacional of User
   * @method
   * @param {number} value - The Nacional of User
   * @returns The original User(this object)
   */

  setNacional(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Nacional = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Nacional = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Address of User
   * @method
   * @returns {Address} The Address of User
   */
  getAddress() {
    return this.Address;
  }
  /**
   * Sets the Address of User
   * @method
   * @param {Address} value - The Address of User
   * @returns The original User(this object)
   */
  setAddress(value) {
    //object based
    if (value == null || value == undefined || value instanceof Address)
      this.Address = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Role of User
   * @method
   * @returns {Role} The Role of User
   */
  getRole() {
    return this.Role;
  }
  /**
   * Sets the Role of User
   * @method
   * @param {Role} value - The Role of User
   * @returns The original User(this object)
   */
  setRole(value) {
    //object based
    if (value == null || value == undefined || value instanceof Role)
      this.Role = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the IdOrg of User
   * @method
   * @returns {number} The IdOrg of User
   */
  getIdOrg() {
    return this.IdOrg;
  }
  /**
   * Sets the IdOrg of User
   * @method
   * @param {number} value - The IdOrg of User
   * @returns The original User(this object)
   */

  setIdOrg(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.IdOrg = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.IdOrg = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the CommunityUser of User
   * @method
   * @returns {Usuario} The CommunityUser of User
   */
  getCommunityUser() {
    return this.CommunityUser;
  }
  /**
   * Sets the CommunityUser of User
   * @method
   * @param {Usuario} value - The CommunityUser of User
   * @returns The original User(this object)
   */
  setCommunityUser(value) {
    //object based
    if (value == null || value == undefined || value instanceof Usuario)
      this.CommunityUser = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Address {
  constructor(obj) {
    /**
     * @type {Int}
     */
    this.Contact = undefined;
    /**
     * @type {String}
     */
    this.Street = undefined;
    /**
     * @type {String}
     */
    this.StreetNumber = undefined;
    /**
     * @type {String}
     */
    this.ApartmentNumber = undefined;
    /**
     * @type {String}
     */
    this.Area = undefined;
    /**
     * @type {String}
     */
    this.Code = undefined;
    /**
     * @type {String}
     */
    this.County = undefined;
    /**
     * @type {String}
     */
    this.City = undefined;
    /**
     * @type {String}
     */
    this.CityCode = undefined;
    /**
     * @type {String}
     */
    this.State = undefined;
    /**
     * @type {String}
     */
    this.Zip = undefined;
    /**
     * @type {String}
     */
    this.Email = undefined;
    /**
     * @type {String}
     */
    this.Country = undefined;
    /**
     * @type {String}
     */
    this.CountryCode = undefined;
    /**
     * @type {String}
     */
    this.LocationReference = undefined;
    /**
     * @type {String}
     */
    this.Company = undefined;
    /**
     * @type {String}
     */
    this.Phone = undefined;
    /**
     * @type {String}
     */
    this.Latitud = undefined;
    /**
     * @type {String}
     */
    this.Longitud = undefined;
    /**
     * @type {AddressType}
     */
    this.AddressType = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Address
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createAddress(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Address's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Address.buscar(this);
  }
  /**
   * Busca Address's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findAddress(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new Address(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateAddress(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteAddress({ id: this.ID.toString() });
  }
  main_Address(args) {
    return main_Address(args, this.ID);
  }

  assingAddressType(args) {
    return assingAddressTypetoAddress(args, this.ID);
  }

  /**
   * Get the Contact of Address
   * @method
   * @returns {number} The Contact of Address
   */
  getContact() {
    return this.Contact;
  }
  /**
   * Sets the Contact of Address
   * @method
   * @param {number} value - The Contact of Address
   * @returns The original Address(this object)
   */

  setContact(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Contact = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Contact = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Street of Address
   * @method
   * @returns {string} The Street of Address
   */
  getStreet() {
    return this.Street;
  }
  /**
   * Sets the Street of Address
   * @method
   * @param {string} value - The Street of Address
   * @returns The original Address(this object)
   */

  setStreet(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Street = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the StreetNumber of Address
   * @method
   * @returns {string} The StreetNumber of Address
   */
  getStreetNumber() {
    return this.StreetNumber;
  }
  /**
   * Sets the StreetNumber of Address
   * @method
   * @param {string} value - The StreetNumber of Address
   * @returns The original Address(this object)
   */

  setStreetNumber(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.StreetNumber = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the ApartmentNumber of Address
   * @method
   * @returns {string} The ApartmentNumber of Address
   */
  getApartmentNumber() {
    return this.ApartmentNumber;
  }
  /**
   * Sets the ApartmentNumber of Address
   * @method
   * @param {string} value - The ApartmentNumber of Address
   * @returns The original Address(this object)
   */

  setApartmentNumber(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.ApartmentNumber = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Area of Address
   * @method
   * @returns {string} The Area of Address
   */
  getArea() {
    return this.Area;
  }
  /**
   * Sets the Area of Address
   * @method
   * @param {string} value - The Area of Address
   * @returns The original Address(this object)
   */

  setArea(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Area = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Code of Address
   * @method
   * @returns {string} The Code of Address
   */
  getCode() {
    return this.Code;
  }
  /**
   * Sets the Code of Address
   * @method
   * @param {string} value - The Code of Address
   * @returns The original Address(this object)
   */

  setCode(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Code = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the County of Address
   * @method
   * @returns {string} The County of Address
   */
  getCounty() {
    return this.County;
  }
  /**
   * Sets the County of Address
   * @method
   * @param {string} value - The County of Address
   * @returns The original Address(this object)
   */

  setCounty(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.County = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the City of Address
   * @method
   * @returns {string} The City of Address
   */
  getCity() {
    return this.City;
  }
  /**
   * Sets the City of Address
   * @method
   * @param {string} value - The City of Address
   * @returns The original Address(this object)
   */

  setCity(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.City = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CityCode of Address
   * @method
   * @returns {string} The CityCode of Address
   */
  getCityCode() {
    return this.CityCode;
  }
  /**
   * Sets the CityCode of Address
   * @method
   * @param {string} value - The CityCode of Address
   * @returns The original Address(this object)
   */

  setCityCode(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CityCode = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the State of Address
   * @method
   * @returns {string} The State of Address
   */
  getState() {
    return this.State;
  }
  /**
   * Sets the State of Address
   * @method
   * @param {string} value - The State of Address
   * @returns The original Address(this object)
   */

  setState(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.State = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Zip of Address
   * @method
   * @returns {string} The Zip of Address
   */
  getZip() {
    return this.Zip;
  }
  /**
   * Sets the Zip of Address
   * @method
   * @param {string} value - The Zip of Address
   * @returns The original Address(this object)
   */

  setZip(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Zip = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Email of Address
   * @method
   * @returns {string} The Email of Address
   */
  getEmail() {
    return this.Email;
  }
  /**
   * Sets the Email of Address
   * @method
   * @param {string} value - The Email of Address
   * @returns The original Address(this object)
   */

  setEmail(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Email = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Country of Address
   * @method
   * @returns {string} The Country of Address
   */
  getCountry() {
    return this.Country;
  }
  /**
   * Sets the Country of Address
   * @method
   * @param {string} value - The Country of Address
   * @returns The original Address(this object)
   */

  setCountry(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Country = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the CountryCode of Address
   * @method
   * @returns {string} The CountryCode of Address
   */
  getCountryCode() {
    return this.CountryCode;
  }
  /**
   * Sets the CountryCode of Address
   * @method
   * @param {string} value - The CountryCode of Address
   * @returns The original Address(this object)
   */

  setCountryCode(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.CountryCode = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the LocationReference of Address
   * @method
   * @returns {string} The LocationReference of Address
   */
  getLocationReference() {
    return this.LocationReference;
  }
  /**
   * Sets the LocationReference of Address
   * @method
   * @param {string} value - The LocationReference of Address
   * @returns The original Address(this object)
   */

  setLocationReference(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.LocationReference = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Company of Address
   * @method
   * @returns {string} The Company of Address
   */
  getCompany() {
    return this.Company;
  }
  /**
   * Sets the Company of Address
   * @method
   * @param {string} value - The Company of Address
   * @returns The original Address(this object)
   */

  setCompany(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Company = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Phone of Address
   * @method
   * @returns {string} The Phone of Address
   */
  getPhone() {
    return this.Phone;
  }
  /**
   * Sets the Phone of Address
   * @method
   * @param {string} value - The Phone of Address
   * @returns The original Address(this object)
   */

  setPhone(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Phone = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Latitud of Address
   * @method
   * @returns {string} The Latitud of Address
   */
  getLatitud() {
    return this.Latitud;
  }
  /**
   * Sets the Latitud of Address
   * @method
   * @param {string} value - The Latitud of Address
   * @returns The original Address(this object)
   */

  setLatitud(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Latitud = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Longitud of Address
   * @method
   * @returns {string} The Longitud of Address
   */
  getLongitud() {
    return this.Longitud;
  }
  /**
   * Sets the Longitud of Address
   * @method
   * @param {string} value - The Longitud of Address
   * @returns The original Address(this object)
   */

  setLongitud(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Longitud = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the AddressType of Address
   * @method
   * @returns {AddressType} The AddressType of Address
   */
  getAddressType() {
    return this.AddressType;
  }
  /**
   * Sets the AddressType of Address
   * @method
   * @param {AddressType} value - The AddressType of Address
   * @returns The original Address(this object)
   */
  setAddressType(value) {
    //object based
    if (value == null || value == undefined || value instanceof AddressType)
      this.AddressType = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class AddressType {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Code = undefined;
    /**
     * @type {String}
     */
    this.Description = undefined;
    /**
     * @type {Int}
     */
    this.Status = undefined;
    /**
     * @type {String}
     */
    this.Value = undefined;
    /**
     * @type {String}
     */
    this.Type = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto AddressType
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createAddressType(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca AddressType's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return AddressType.buscar(this);
  }
  /**
   * Busca AddressType's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findAddressType(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new AddressType(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateAddressType(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteAddressType({ id: this.ID.toString() });
  }
  main_AddressType(args) {
    return main_AddressType(args, this.ID);
  }

  /**
   * Get the Code of AddressType
   * @method
   * @returns {string} The Code of AddressType
   */
  getCode() {
    return this.Code;
  }
  /**
   * Sets the Code of AddressType
   * @method
   * @param {string} value - The Code of AddressType
   * @returns The original AddressType(this object)
   */

  setCode(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Code = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Description of AddressType
   * @method
   * @returns {string} The Description of AddressType
   */
  getDescription() {
    return this.Description;
  }
  /**
   * Sets the Description of AddressType
   * @method
   * @param {string} value - The Description of AddressType
   * @returns The original AddressType(this object)
   */

  setDescription(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Description = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Status of AddressType
   * @method
   * @returns {number} The Status of AddressType
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of AddressType
   * @method
   * @param {number} value - The Status of AddressType
   * @returns The original AddressType(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Status = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Status = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Value of AddressType
   * @method
   * @returns {string} The Value of AddressType
   */
  getValue() {
    return this.Value;
  }
  /**
   * Sets the Value of AddressType
   * @method
   * @param {string} value - The Value of AddressType
   * @returns The original AddressType(this object)
   */

  setValue(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Value = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Type of AddressType
   * @method
   * @returns {string} The Type of AddressType
   */
  getType() {
    return this.Type;
  }
  /**
   * Sets the Type of AddressType
   * @method
   * @param {string} value - The Type of AddressType
   * @returns The original AddressType(this object)
   */

  setType(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Type = value;
    else throw new Error("Wrong value type");
    return this;
  }
}

export class Org {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Name = undefined;
    /**
     * @type {Int}
     */
    this.Status = undefined;
    /**
     * @type {Int}
     */
    this.PartnerType = undefined;
    /**
     * @type {String}
     */
    this.Code = undefined;
    /**
     * @type {Int}
     */
    this.ShowNameOnWeb = undefined;
    /**
     * @type {Int}
     */
    this.IsCliente = undefined;
    /**
     * @type {Array<Compania>}
     */
    this.Companias = [];
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Org
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createOrg(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Org's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Org.buscar(this);
  }
  /**
   * Busca Org's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findOrg(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) => newArray.push(new Org(element)));
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateOrg(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteOrg({ id: this.ID.toString() });
  }
  main_Org(args) {
    return main_Org(args, this.ID);
  }

  addCompanias(args) {
    return addCompaniastoOrg(args, this.ID);
  }

  /**
   * Get the Name of Org
   * @method
   * @returns {string} The Name of Org
   */
  getName() {
    return this.Name;
  }
  /**
   * Sets the Name of Org
   * @method
   * @param {string} value - The Name of Org
   * @returns The original Org(this object)
   */

  setName(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Name = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Status of Org
   * @method
   * @returns {number} The Status of Org
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of Org
   * @method
   * @param {number} value - The Status of Org
   * @returns The original Org(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Status = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Status = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the PartnerType of Org
   * @method
   * @returns {number} The PartnerType of Org
   */
  getPartnerType() {
    return this.PartnerType;
  }
  /**
   * Sets the PartnerType of Org
   * @method
   * @param {number} value - The PartnerType of Org
   * @returns The original Org(this object)
   */

  setPartnerType(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.PartnerType = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.PartnerType = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Code of Org
   * @method
   * @returns {string} The Code of Org
   */
  getCode() {
    return this.Code;
  }
  /**
   * Sets the Code of Org
   * @method
   * @param {string} value - The Code of Org
   * @returns The original Org(this object)
   */

  setCode(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Code = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the ShowNameOnWeb of Org
   * @method
   * @returns {number} The ShowNameOnWeb of Org
   */
  getShowNameOnWeb() {
    return this.ShowNameOnWeb;
  }
  /**
   * Sets the ShowNameOnWeb of Org
   * @method
   * @param {number} value - The ShowNameOnWeb of Org
   * @returns The original Org(this object)
   */

  setShowNameOnWeb(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.ShowNameOnWeb = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.ShowNameOnWeb = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the IsCliente of Org
   * @method
   * @returns {number} The IsCliente of Org
   */
  getIsCliente() {
    return this.IsCliente;
  }
  /**
   * Sets the IsCliente of Org
   * @method
   * @param {number} value - The IsCliente of Org
   * @returns The original Org(this object)
   */

  setIsCliente(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.IsCliente = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.IsCliente = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class Role {
  constructor(obj) {
    /**
     * @type {Int}
     */
    this.MovilePrivilege = undefined;
    /**
     * @type {String}
     */
    this.Name = undefined;
    /**
     * @type {Int}
     */
    this.IdStatusProblems = undefined;
    /**
     * @type {Int}
     */
    this.PartnerType = undefined;
    /**
     * @type {Int}
     */
    this.Estatus = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto Role
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createRole(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca Role's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return Role.buscar(this);
  }
  /**
   * Busca Role's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findRole(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) => newArray.push(new Role(element)));
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateRole(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteRole({ id: this.ID.toString() });
  }
  main_Role(args) {
    return main_Role(args, this.ID);
  }

  /**
   * Get the MovilePrivilege of Role
   * @method
   * @returns {number} The MovilePrivilege of Role
   */
  getMovilePrivilege() {
    return this.MovilePrivilege;
  }
  /**
   * Sets the MovilePrivilege of Role
   * @method
   * @param {number} value - The MovilePrivilege of Role
   * @returns The original Role(this object)
   */

  setMovilePrivilege(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.MovilePrivilege = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.MovilePrivilege = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Name of Role
   * @method
   * @returns {string} The Name of Role
   */
  getName() {
    return this.Name;
  }
  /**
   * Sets the Name of Role
   * @method
   * @param {string} value - The Name of Role
   * @returns The original Role(this object)
   */

  setName(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Name = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the IdStatusProblems of Role
   * @method
   * @returns {number} The IdStatusProblems of Role
   */
  getIdStatusProblems() {
    return this.IdStatusProblems;
  }
  /**
   * Sets the IdStatusProblems of Role
   * @method
   * @param {number} value - The IdStatusProblems of Role
   * @returns The original Role(this object)
   */

  setIdStatusProblems(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.IdStatusProblems = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.IdStatusProblems = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the PartnerType of Role
   * @method
   * @returns {number} The PartnerType of Role
   */
  getPartnerType() {
    return this.PartnerType;
  }
  /**
   * Sets the PartnerType of Role
   * @method
   * @param {number} value - The PartnerType of Role
   * @returns The original Role(this object)
   */

  setPartnerType(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.PartnerType = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.PartnerType = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Estatus of Role
   * @method
   * @returns {number} The Estatus of Role
   */
  getEstatus() {
    return this.Estatus;
  }
  /**
   * Sets the Estatus of Role
   * @method
   * @param {number} value - The Estatus of Role
   * @returns The original Role(this object)
   */

  setEstatus(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Estatus = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Estatus = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class App {
  constructor(obj) {
    /**
     * @type {Int}
     */
    this.IDMODULO = undefined;
    /**
     * @type {String}
     */
    this.DESCRIPCION = undefined;
    /**
     * @type {String}
     */
    this.DescripcionEn = undefined;
    /**
     * @type {String}
     */
    this.Clase = undefined;
    /**
     * @type {String}
     */
    this.Icono = undefined;
    /**
     * @type {Int}
     */
    this.TIPO = undefined;
    /**
     * @type {Int}
     */
    this.Orden = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto App
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createApp(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca App's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return App.buscar(this);
  }
  /**
   * Busca App's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findApp(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) => newArray.push(new App(element)));
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateApp(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteApp({ id: this.ID.toString() });
  }
  main_App(args) {
    return main_App(args, this.ID);
  }

  /**
   * Get the IDMODULO of App
   * @method
   * @returns {number} The IDMODULO of App
   */
  getIDMODULO() {
    return this.IDMODULO;
  }
  /**
   * Sets the IDMODULO of App
   * @method
   * @param {number} value - The IDMODULO of App
   * @returns The original App(this object)
   */

  setIDMODULO(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.IDMODULO = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.IDMODULO = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the DESCRIPCION of App
   * @method
   * @returns {string} The DESCRIPCION of App
   */
  getDESCRIPCION() {
    return this.DESCRIPCION;
  }
  /**
   * Sets the DESCRIPCION of App
   * @method
   * @param {string} value - The DESCRIPCION of App
   * @returns The original App(this object)
   */

  setDESCRIPCION(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.DESCRIPCION = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the DescripcionEn of App
   * @method
   * @returns {string} The DescripcionEn of App
   */
  getDescripcionEn() {
    return this.DescripcionEn;
  }
  /**
   * Sets the DescripcionEn of App
   * @method
   * @param {string} value - The DescripcionEn of App
   * @returns The original App(this object)
   */

  setDescripcionEn(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.DescripcionEn = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Clase of App
   * @method
   * @returns {string} The Clase of App
   */
  getClase() {
    return this.Clase;
  }
  /**
   * Sets the Clase of App
   * @method
   * @param {string} value - The Clase of App
   * @returns The original App(this object)
   */

  setClase(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Clase = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Icono of App
   * @method
   * @returns {string} The Icono of App
   */
  getIcono() {
    return this.Icono;
  }
  /**
   * Sets the Icono of App
   * @method
   * @param {string} value - The Icono of App
   * @returns The original App(this object)
   */

  setIcono(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Icono = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the TIPO of App
   * @method
   * @returns {number} The TIPO of App
   */
  getTIPO() {
    return this.TIPO;
  }
  /**
   * Sets the TIPO of App
   * @method
   * @param {number} value - The TIPO of App
   * @returns The original App(this object)
   */

  setTIPO(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.TIPO = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.TIPO = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Orden of App
   * @method
   * @returns {number} The Orden of App
   */
  getOrden() {
    return this.Orden;
  }
  /**
   * Sets the Orden of App
   * @method
   * @param {number} value - The Orden of App
   * @returns The original App(this object)
   */

  setOrden(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Orden = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Orden = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }
}

export class FileUpload {
  constructor(obj) {
    /**
     * @type {String}
     */
    this.Name = undefined;
    /**
     * @type {String}
     */
    this.Type = undefined;
    /**
     * @type {Int}
     */
    this.Size = undefined;
    /**
     * @type {Int}
     */
    this.FolderID = undefined;
    /**
     * @type {Int}
     */
    this.FileType = undefined;
    /**
     * @type {Boolean}
     */
    this.Status = undefined;
    /**
     * @type {Array<byte>}
     */
    this.ByteArray = [];
    /**
     * @type {String}
     */
    this.Base64 = undefined;
    obj && Object.assign(this, obj);
  }
  /**
   * Crea un nuevo objeto FileUpload
   * @method
   * @returns {Promise<Response>}
   */
  crear() {
    return new Promise((resolve, reject) => {
      createFileUpload(this)
        .then((response) => {
          this.ID = response.value;
          resolve(response);
        })
        .catch((error) => {
          reject(error);
        });
    });
  }

  /**
   * Busca FileUpload's con las mismas propiedades que este objeto
   * @method
   * @returns {Promise<Response>}
   */
  searchLikeMe() {
    return FileUpload.buscar(this);
  }
  /**
   * Busca FileUpload's, puedes usar {qwery:"<mysqlquery>"} o {qwery:"<mysqlquery>",graphql="<propiedades>"}
   * @method
   * @returns {Promise<Response>}
   */
  static buscar(args) {
    return new Promise((resolve, reject) => {
      findFileUpload(args)
        .then((response) => {
          const newArray = [];
          response.Value.forEach((element) =>
            newArray.push(new FileUpload(element))
          );
          response.Value = newArray;
          resolve(response);
        })
        .catch((response) => {
          reject(response);
        });
    });
  }
  /**
   * Actualiza la informacion de esta entidad
   * @method
   * @returns {Promise<Response>}
   */
  actualizar() {
    return new Promise((resolve, reject) => {
      resolve(updateFileUpload(this));
    });
  }
  /**
   * Elimina la
   * @method
   * @returns {Promise<Response>}
   */
  eliminar() {
    return deleteFileUpload({ id: this.ID.toString() });
  }
  main_FileUpload(args) {
    return main_FileUpload(args, this.ID);
  }

  /**
   * Get the Name of FileUpload
   * @method
   * @returns {string} The Name of FileUpload
   */
  getName() {
    return this.Name;
  }
  /**
   * Sets the Name of FileUpload
   * @method
   * @param {string} value - The Name of FileUpload
   * @returns The original FileUpload(this object)
   */

  setName(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Name = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Type of FileUpload
   * @method
   * @returns {string} The Type of FileUpload
   */
  getType() {
    return this.Type;
  }
  /**
   * Sets the Type of FileUpload
   * @method
   * @param {string} value - The Type of FileUpload
   * @returns The original FileUpload(this object)
   */

  setType(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Type = value;
    else throw new Error("Wrong value type");
    return this;
  }

  /**
   * Get the Size of FileUpload
   * @method
   * @returns {number} The Size of FileUpload
   */
  getSize() {
    return this.Size;
  }
  /**
   * Sets the Size of FileUpload
   * @method
   * @param {number} value - The Size of FileUpload
   * @returns The original FileUpload(this object)
   */

  setSize(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.Size = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.Size = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FolderID of FileUpload
   * @method
   * @returns {number} The FolderID of FileUpload
   */
  getFolderID() {
    return this.FolderID;
  }
  /**
   * Sets the FolderID of FileUpload
   * @method
   * @param {number} value - The FolderID of FileUpload
   * @returns The original FileUpload(this object)
   */

  setFolderID(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.FolderID = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.FolderID = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the FileType of FileUpload
   * @method
   * @returns {number} The FileType of FileUpload
   */
  getFileType() {
    return this.FileType;
  }
  /**
   * Sets the FileType of FileUpload
   * @method
   * @param {number} value - The FileType of FileUpload
   * @returns The original FileUpload(this object)
   */

  setFileType(value) {
    if (value == null || value == undefined || typeof value === "number") {
      this.FileType = value;
    } else if (typeof value === "string") {
      const parsedValue = Number(value);
      if (isNaN(parsedValue)) {
        throw new Error("Failed to cast the string to a number");
      } else {
        this.FileType = parsedValue;
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Status of FileUpload
   * @method
   * @returns {boolean} The Status of FileUpload
   */
  getStatus() {
    return this.Status;
  }
  /**
   * Sets the Status of FileUpload
   * @method
   * @param {boolean} value - The Status of FileUpload
   * @returns The original FileUpload(this object)
   */

  setStatus(value) {
    if (value == null || value == undefined || typeof value === "boolean") {
      this.Status = value;
    } else if (typeof value === "string") {
      const booleanValue = Boolean(value);
      if (booleanValue) {
        this.Status = value.toLowerCase() === "true";
      } else {
        throw new Error("Failed to cast string to boolean");
      }
    } else {
      throw new Error("Wrong value type");
    }
    return this;
  }

  /**
   * Get the Base64 of FileUpload
   * @method
   * @returns {string} The Base64 of FileUpload
   */
  getBase64() {
    return this.Base64;
  }
  /**
   * Sets the Base64 of FileUpload
   * @method
   * @param {string} value - The Base64 of FileUpload
   * @returns The original FileUpload(this object)
   */

  setBase64(value) {
    if (value == null || value == undefined || typeof value === "string")
      this.Base64 = value;
    else throw new Error("Wrong value type");
    return this;
  }

  uploadFile(callback) {
    uploadFileToSabueso(this, callback);
  }
  getFile(callback) {
    downloadFileFromSabueso(this.ID.toString(), callback);
  }
}

function findDevice(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Device/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateDevice(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Device/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteDevice(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Device/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createDevice(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Device/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findGrupos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Grupos/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateGrupos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Grupos/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteGrupos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Grupos/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createGrupos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Grupos/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingTipoGrupotoGrupos(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Grupos/TipoGrupo/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addUsuariostoGrupos(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Grupos/Usuarios/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findCompania(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCompania(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCompania(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCompania(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function addUsuariostoCompania(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/Usuarios/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addCargostoCompania(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/Cargos/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addAusenciastoCompania(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Compania/Ausencias/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findNoticia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Noticia/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateNoticia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Noticia/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteNoticia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Noticia/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createNoticia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Noticia/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function addDocumentostoNoticia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Noticia/Documentos/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addComentariostoNoticia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Noticia/Comentarios/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findContrato(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Contrato/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateContrato(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Contrato/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteContrato(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Contrato/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createContrato(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Contrato/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findTareaOnBoarding(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "TareaOnBoarding/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateTareaOnBoarding(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "TareaOnBoarding/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteTareaOnBoarding(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "TareaOnBoarding/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createTareaOnBoarding(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "TareaOnBoarding/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingDocumentotoTareaOnBoarding(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "TareaOnBoarding/Documento/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findCargo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCargo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCargo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCargo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingDirectivotoCargo(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/Directivo/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingDepartamentotoCargo(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/Departamento/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingSubAreatoCargo(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/SubArea/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addUsuariostoCargo(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Cargo/Usuarios/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findRegistroAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateRegistroAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteRegistroAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createRegistroAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingSolicitadortoRegistroAusencia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/Solicitador/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingBeneficiadotoRegistroAusencia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/Beneficiado/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingTipoDeAusenciatoRegistroAusencia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/TipoDeAusencia/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingAprobadoPortoRegistroAusencia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/AprobadoPor/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addAdjuntotoRegistroAusencia(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "RegistroAusencia/Adjunto/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Ausencia/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Ausencia/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Ausencia/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createAusencia(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Ausencia/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findComentario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateComentario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteComentario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createComentario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingUsuariotoComentario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/Usuario/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addArchivostoComentario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/Archivos/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addComentariostoComentario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Comentario/Comentarios/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findRegistro(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Registro/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateRegistro(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Registro/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteRegistro(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Registro/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createRegistro(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Registro/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingUsuariotoRegistro(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Registro/Usuario/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findConfiguracionRetardos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionRetardos/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateConfiguracionRetardos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionRetardos/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteConfiguracionRetardos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionRetardos/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createConfiguracionRetardos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionRetardos/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findJornadaExcepcion(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "JornadaExcepcion/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateJornadaExcepcion(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "JornadaExcepcion/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteJornadaExcepcion(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "JornadaExcepcion/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createJornadaExcepcion(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "JornadaExcepcion/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findJornada(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateJornada(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteJornada(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createJornada(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function addConfigtoJornada(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/Config/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addConifEsptoJornada(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/ConifEsp/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addUsuariostoJornada(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Jornada/Usuarios/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findConfiguracionJornadaEspecifica(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionJornadaEspecifica/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateConfiguracionJornadaEspecifica(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionJornadaEspecifica/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteConfiguracionJornadaEspecifica(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionJornadaEspecifica/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createConfiguracionJornadaEspecifica(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "ConfiguracionJornadaEspecifica/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findUsuario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateUsuario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteUsuario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createUsuario(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingSabuesoUsertoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/SabuesoUser/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingResponsabletoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/Responsable/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingGestorVacacionestoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/GestorVacaciones/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingSegGestorVacacionestoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/SegGestorVacaciones/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addJornadastoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/Jornadas/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addRegistrostoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/Registros/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function addAusenciastoUsuario(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Usuario/Ausencias/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findCatalogo_Categoria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Categoria/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCatalogo_Categoria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Categoria/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCatalogo_Categoria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Categoria/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCatalogo_Categoria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Categoria/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findCatalogo_Grupo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Grupo/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCatalogo_Grupo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Grupo/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCatalogo_Grupo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Grupo/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCatalogo_Grupo(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Grupo/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findCatalogo_Directivos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Directivos/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCatalogo_Directivos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Directivos/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCatalogo_Directivos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Directivos/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCatalogo_Directivos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Directivos/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findCatalogo_Departamentos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Departamentos/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCatalogo_Departamentos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Departamentos/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCatalogo_Departamentos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Departamentos/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCatalogo_Departamentos(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Departamentos/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingDirectivotoCatalogo_Departamentos(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_Departamentos/Directivo/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findCatalogo_SubAreas(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_SubAreas/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCatalogo_SubAreas(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_SubAreas/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCatalogo_SubAreas(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_SubAreas/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCatalogo_SubAreas(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_SubAreas/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingDepartamentotoCatalogo_SubAreas(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_SubAreas/Departamento/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findCatalogo_ZonaHoraria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_ZonaHoraria/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateCatalogo_ZonaHoraria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_ZonaHoraria/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteCatalogo_ZonaHoraria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_ZonaHoraria/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createCatalogo_ZonaHoraria(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Catalogo_ZonaHoraria/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findUser(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateUser(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteUser(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createUser(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingAddresstoUser(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/Address/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingRoletoUser(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/Role/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function assingCommunityUsertoUser(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "User/CommunityUser/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findAddress(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Address/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateAddress(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Address/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteAddress(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Address/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createAddress(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Address/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function assingAddressTypetoAddress(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Address/AddressType/assing";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findAddressType(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "AddressType/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateAddressType(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "AddressType/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteAddressType(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "AddressType/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createAddressType(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "AddressType/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findOrg(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Org/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateOrg(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Org/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteOrg(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Org/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createOrg(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Org/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function addCompaniastoOrg(body, id, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //
  //test if id is null (which MUST not be at this point)
  if (id === null || typeof id === "undefined" || id === 0) {
    const error = errorBuilderById(2);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Org/Companias/add";
  return postPromise(url, removeEmptyValues({ data: body, parent: id }));
}

function findRole(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Role/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateRole(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Role/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteRole(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Role/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createRole(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "Role/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findApp(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "App/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateApp(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "App/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteApp(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "App/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createApp(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "App/";
  return postPromise(url, "POST", removeEmptyValues(body));
}

function findFileUpload(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "FileUpload/";
  return postPromise(url, "GET", removeEmptyValues(body));
}

function updateFileUpload(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "FileUpload/";
  return postPromise(url, "PUT", removeEmptyValues(body));
}

function deleteFileUpload(body) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }

  const url = moduleAddress + "FileUpload/";
  return postPromise(url, "DELETE", removeEmptyValues(body));
}

function createFileUpload(body, callback) {
  //test if body is null (which MUST not be at this point)
  if (body === null || typeof body === "undefined") {
    const error = errorBuilderById(1);
    if (checkCallbackFailure(callback)) {
      callback.failure(error);
    }
    return;
  }
  //first create and register the file on sabueso
  body.uploadFile(
    new ServerResponse(
      (result) => {
        // on success reset data
        if (result.type == "success") {
          body.ID = result.id;
          callback.success(result);
        } else {
          callback.failure(result);
        }
      },
      (result) => {
        // on error only call callback
        callback.failure(result);
      }
    )
  );
}
